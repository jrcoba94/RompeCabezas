require = function e(t, n, a) { function l(o, r) { if (!n[o]) { if (!t[o]) { var s = "function" == typeof require && require; if (!r && s) return s(o, !0); if (i) return i(o, !0); var u = new Error("Cannot find module '" + o + "'"); throw u.code = "MODULE_NOT_FOUND", u } var c = n[o] = { exports: {} }; t[o][0].call(c.exports, function (e) { var n = t[o][1][e]; return l(n ? n : e) }, c, c.exports, e, t, n, a) } return n[o].exports } for (var i = "function" == typeof require && require, o = 0; o < a.length; o++) l(a[o]); return l }({
    "/home/ubuntu/staging/apps/build/js/turtle/main.js": [function (e) { "use strict"; var t = e("../appMain"), n = e("../StudioApp").singleton, a = e("./turtle"), l = e("./blocks"), i = e("./skins"), o = e("./levels"); window.turtleMain = function (e) { e.skinsModule = i, e.blocksModule = l; var r = new a; window.__TestInterface.setSpeedSliderValue = function (e) { r.speedSlider.setValue(e) }, r.injectStudioApp(n), t(r, o, e) } }, { "../StudioApp": "/home/ubuntu/staging/apps/build/js/StudioApp.js", "../appMain": "/home/ubuntu/staging/apps/build/js/appMain.js", "./blocks": "/home/ubuntu/staging/apps/build/js/turtle/blocks.js", "./levels": "/home/ubuntu/staging/apps/build/js/turtle/levels.js", "./skins": "/home/ubuntu/staging/apps/build/js/turtle/skins.js", "./turtle": "/home/ubuntu/staging/apps/build/js/turtle/turtle.js" }], "/home/ubuntu/staging/apps/build/js/turtle/skins.js": [function (e, t, n) { "use strict"; var a = e("../skins"); n.load = function (e, t) { var n = a.load(e, t), l = { anna: { speedModifier: 10, turtleNumFrames: 10, smoothAnimate: !0, consolidateTurnAndMove: !0, annaLine: n.assetUrl("annaline.png"), annaLine_2x: n.assetUrl("annaline_2x.png"), lineStylePatternOptions: [[n.assetUrl("annaline-menuicon.png"), "annaLine"]] }, elsa: { speedModifier: 10, turtleNumFrames: 20, decorationAnimationNumFrames: 19, smoothAnimate: !0, consolidateTurnAndMove: !0, elsaLine: n.assetUrl("elsaline.png"), elsaLine_2x: n.assetUrl("elsaline_2x.png"), lineStylePatternOptions: [[n.assetUrl("elsaline-menuicon.png"), "elsaLine"]] }, artist: { lineStylePatternOptions: [[n.rainbowMenu, "rainbowLine"], [n.ropeMenu, "ropeLine"], [n.squigglyMenu, "squigglyLine"], [n.swirlyMenu, "swirlyLine"]] } }, i = function () { var t, n, a = ["Alien", "Bat", "Bird", "Cat", "Caveboy", "Cavegirl", "Dinosaur", "Dog", "Dragon", "Ghost", "Knight", "Monster", "Ninja", "Octopus", "Penguin", "Pirate", "Princess", "Robot", "Soccerboy", "Soccergirl", "Spacebot", "Squirrel", "Tennisboy", "Tennisgirl", "Unicorn", "Witch", "Wizard", "Zombie"], l = ["Beaver", "Bunny", "Chicken", "Elephant", "Giraffe", "Goat", "Grasshopper", "Hippo", "Lion", "Llama", "Monkey", "Moose", "Mouse", "Owl", "Peacock", "Rocket", "Triceratops", "Turtle", "Zebra"], i = {}; for (t = 0; t < a.length; t++) n = a[t], i[n] = e("media/skins/studio/" + n.toLowerCase() + "_thumb.png"); for (t = 0; t < l.length; t++) n = l[t], i[n] = e("media/common_images/stickers/" + n.toLowerCase() + ".png"); return i }; n.stickers = i(); var o = l[n.id]; n.speedModifier = 1; for (var r in o) n[r] = o[r]; var s = [[n.patternDefault, "DEFAULT"]]; return o && o.lineStylePatternOptions && (s = s.concat(o.lineStylePatternOptions)), n.lineStylePatternOptions = s, n } }, { "../skins": "/home/ubuntu/staging/apps/build/js/skins.js" }], "/home/ubuntu/staging/apps/build/js/turtle/blocks.js": [function (e, t, n) { "use strict"; var a = e("./colours"), l = e("./locale"), i = e("../locale"), o = e("./customLevelBlocks"); e("./turtle"), n.install = function (e, t) { var n = t.skin, r = e.Generator.get("JavaScript"); e.JavaScript = r; var s = function (t) { var n = e.Variables.NAME_TYPE; return r.variableDB_.getDistinctName(t, n) }; "anna" == n.id || "elsa" == n.id ? (e.FieldColour.COLOURS = [a.FROZEN1, a.FROZEN2, a.FROZEN3, a.FROZEN4, a.FROZEN5, a.FROZEN6, a.FROZEN7, a.FROZEN8, a.FROZEN9], e.FieldColour.COLUMNS = 3) : (e.FieldColour.COLOURS = [a.BLACK, a.GREY, a.KHAKI, a.WHITE, a.RED, a.PINK, a.ORANGE, a.YELLOW, a.GREEN, a.BLUE, a.AQUAMARINE, a.PLUM], e.FieldColour.COLUMNS = 4), e.Blocks.draw_move_by_constant = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_move.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldTextInput("100", e.FieldTextInput.numberValidator), "VALUE").appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.moveForwardTooltip()) } }, e.Blocks.draw_move_by_constant_dropdown = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_move.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldDropdown, "VALUE").appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.moveForwardTooltip()) } }, r.draw_move_by_constant = function () { var e = window.parseFloat(this.getTitleValue("VALUE")) || 0; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, r.draw_move_by_constant_dropdown = r.draw_move_by_constant, e.Blocks.draw_turn_by_constant_restricted = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldDropdown(this.VALUE), "VALUE").appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, e.Blocks.draw_turn_by_constant_restricted.VALUE = [30, 45, 60, 90, 120, 135, 150, 180].map(function (e) { return [String(e), String(e)] }), r.draw_turn_by_constant_restricted = function () { var e = window.parseFloat(this.getTitleValue("VALUE")); return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_turn_by_constant = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldTextInput("90", e.FieldTextInput.numberValidator), "VALUE").appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, e.Blocks.draw_turn_by_constant_dropdown = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldDropdown, "VALUE").appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, r.draw_turn_by_constant = function () { var e = window.parseFloat(this.getTitleValue("VALUE")) || 0; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, r.draw_turn_by_constant_dropdown = r.draw_turn_by_constant, r.draw_move_inline = function () { var e = window.parseFloat(this.getTitleValue("VALUE")); return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_turn_inline_restricted = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldDropdown(this.VALUE), "VALUE").appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, e.Blocks.draw_turn_inline_restricted.VALUE = [30, 45, 60, 90, 120, 135, 150, 180].map(function (e) { return [String(e), String(e)] }), r.draw_turn_inline_restricted = function () { var e = window.parseFloat(this.getTitleValue("VALUE")); return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_turn_inline = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldTextInput("90", e.FieldTextInput.numberValidator), "VALUE").appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, r.draw_turn_inline = function () { var e = window.parseFloat(this.getTitleValue("VALUE")); return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.variables_get_counter = { category: null, helpUrl: e.Msg.VARIABLES_GET_HELPURL, init: function () { this.setHSV(312, .32, .62), this.appendDummyInput().appendTitle(e.Msg.VARIABLES_GET_TITLE).appendTitle(new e.FieldLabel(l.loopVariable()), "VAR"), this.setOutput(!0), this.setTooltip(e.Msg.VARIABLES_GET_TOOLTIP) }, getVars: function () { return [this.getTitleValue("VAR")] } }, r.variables_get_counter = r.variables_get, e.Blocks.variables_get_length = { category: null, helpUrl: e.Msg.VARIABLES_GET_HELPURL, init: function () { this.setHSV(312, .32, .62), this.appendDummyInput().appendTitle(e.Msg.VARIABLES_GET_TITLE).appendTitle(new e.FieldLabel(l.lengthParameter()), "VAR"), this.setOutput(!0), this.setTooltip(e.Msg.VARIABLES_GET_TOOLTIP) }, getVars: function () { return [this.getTitleValue("VAR")] } }, r.variables_get_length = r.variables_get, e.Blocks.variables_get_sides = { category: null, helpUrl: e.Msg.VARIABLES_GET_HELPURL, init: function () { this.setHSV(312, .32, .62), this.appendDummyInput().appendTitle(e.Msg.VARIABLES_GET_TITLE).appendTitle(new e.FieldLabel("sides"), "VAR"), this.setOutput(!0), this.setTooltip(e.Msg.VARIABLES_GET_TOOLTIP) }, getVars: function () { return [this.getTitleValue("VAR")] } }, r.variables_get_sides = r.variables_get, e.Blocks.draw_a_square = { init: function () { this.setHSV(94, .84, .6), this.appendDummyInput().appendTitle(l.drawASquare()), this.appendValueInput("VALUE").setAlign(e.ALIGN_RIGHT).setCheck(e.BlockValueType.NUMBER).appendTitle(l.lengthParameter() + ":"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setInputsInline(!0), this.setTooltip("") } }, r.draw_a_square = function () { var e = r.valueToCode(this, "VALUE", r.ORDER_ATOMIC) || 0, t = s("count"); return ["// draw_a_square", "for (var " + t + " = 0; " + t + " < 4; " + t + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(90);", "}\n"].join("\n") }, e.Blocks.draw_a_snowman = { init: function () { this.setHSV(94, .84, .6), this.appendDummyInput().appendTitle(l.drawASnowman()), this.appendValueInput("VALUE").setAlign(e.ALIGN_RIGHT).setCheck(e.BlockValueType.NUMBER).appendTitle(l.lengthParameter() + ":"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip("") } }, r.draw_a_snowman = function () { var e = r.valueToCode(this, "VALUE", r.ORDER_ATOMIC), t = s("distances"), n = s("counter"), a = s("degree"), l = s("distance"); return ["// draw_a_snowman", "Turtle.turnLeft(90);", "var " + t + " = [" + e + " * 0.5, " + e + " * 0.3," + e + " * 0.2];", "for (var " + n + " = 0; " + n + " < 6; " + n + "++) {\n", "  var " + l + " = " + t + "[" + n + " < 3 ? " + n + ": 5 - " + n + "] / 57.5;", "  for (var " + a + " = 0; " + a + " < 90; " + a + "++) {", "    Turtle.moveForward(" + l + ");", "    Turtle.turnRight(2);", "  }", "  if (" + n + " != 2) {", "    Turtle.turnLeft(180);", "  }", "}", "Turtle.turnLeft(90);\n"].join("\n") }, e.Blocks.controls_for_counter = { helpUrl: e.Msg.CONTROLS_FOR_HELPURL, init: function () { this.setHSV(322, .9, .95), this.appendDummyInput().appendTitle(e.Msg.CONTROLS_FOR_INPUT_WITH).appendTitle(new e.FieldLabel(l.loopVariable()), "VAR"), this.interpolateMsg(e.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY, ["FROM", "Number", e.ALIGN_RIGHT], ["TO", "Number", e.ALIGN_RIGHT], ["BY", "Number", e.ALIGN_RIGHT], e.ALIGN_RIGHT), this.appendStatementInput("DO").appendTitle(Blockly.Msg.CONTROLS_FOR_INPUT_DO), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setInputsInline(!0), this.setTooltip(e.Msg.CONTROLS_FOR_TOOLTIP.replace("%1", this.getTitleValue("VAR"))) }, getVars: function () { return [this.getTitleValue("VAR")] }, customContextMenu: function (t) { var n = { enabled: !0 }, a = this.getTitleValue("VAR"); n.text = e.Msg.VARIABLES_SET_CREATE_GET.replace("%1", a); var l = document.createElement("title"); l.appendChild(document.createTextNode(a)), l.setAttribute("name", "VAR"); var i = document.createElement("block"); i.appendChild(l), i.setAttribute("type", "variables_get_counter"), n.callback = e.ContextMenu.callbackFactory(this, i), t.push(n) }, mutationToDom: function () { var e = document.createElement("mutation"), t = this.getTitleValue("VAR"); return e.setAttribute("counter", t), e }, domToMutation: function (e) { var t = e.getAttribute("counter"); this.setTitleValue(t, "VAR") } }, r.controls_for_counter = r.controls_for, delete e.Blocks.procedures_defreturn, delete e.Blocks.procedures_ifreturn, e.Blocks.draw_move = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendValueInput("VALUE").setCheck(e.BlockValueType.NUMBER).appendTitle(new e.FieldDropdown(e.Blocks.draw_move.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.moveTooltip()) } }, e.Blocks.draw_move.DIRECTIONS = [[l.moveForward(), "moveForward"], [l.moveBackward(), "moveBackward"]], r.draw_move = function () { var e = r.valueToCode(this, "VALUE", r.ORDER_NONE) || "0"; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.jump = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendValueInput("VALUE").setCheck(e.BlockValueType.NUMBER).appendTitle(new e.FieldDropdown(e.Blocks.jump.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.jumpTooltip()) } }; var u = "LONG_MOVE_LENGTH", c = "SHORT_MOVE_LENGTH", p = [[n.longLineDraw, u], [n.shortLineDraw, c]], h = [[n.longLineDrawRight, u], [n.shortLineDrawRight, c]], d = { DEFAULT_MOVE_LENGTH: 50, SHORT_MOVE_LENGTH: 50, LONG_MOVE_LENGTH: 100, DIRECTION_CONFIGS: { left: { title: i.directionWestLetter(), moveFunction: "moveLeft", tooltip: l.moveWestTooltip(), image: n.westLineDraw, imageDimensions: { width: 72, height: 56 }, lengths: p }, right: { title: i.directionEastLetter(), moveFunction: "moveRight", tooltip: l.moveEastTooltip(), image: n.eastLineDraw, imageDimensions: { width: 72, height: 56 }, lengths: h }, up: { title: i.directionNorthLetter(), moveFunction: "moveUp", tooltip: l.moveNorthTooltip(), image: n.northLineDraw, imageDimensions: { width: 72, height: 56 }, lengths: p }, down: { title: i.directionSouthLetter(), moveFunction: "moveDown", tooltip: l.moveSouthTooltip(), image: n.southLineDraw, imageDimensions: { width: 72, height: 56 }, lengths: p }, jump_left: { isJump: !0, title: i.directionWestLetter(), moveFunction: "jumpLeft", image: n.leftJumpArrow, tooltip: l.jumpWestTooltip() }, jump_right: { isJump: !0, title: i.directionEastLetter(), moveFunction: "jumpRight", image: n.rightJumpArrow, tooltip: l.jumpEastTooltip() }, jump_up: { isJump: !0, title: i.directionNorthLetter(), moveFunction: "jumpUp", image: n.upJumpArrow, tooltip: l.jumpNorthTooltip() }, jump_down: { isJump: !0, title: i.directionSouthLetter(), moveFunction: "jumpDown", image: n.downJumpArrow, tooltip: l.jumpSouthTooltip() } }, generateBlocksForAllDirections: function () { d.generateBlocksForDirection("up"), d.generateBlocksForDirection("down"), d.generateBlocksForDirection("left"), d.generateBlocksForDirection("right") }, generateBlocksForDirection: function (t) { r["simple_move_" + t] = d.generateCodeGenerator(t), r["simple_jump_" + t] = d.generateCodeGenerator("jump_" + t), r["simple_move_" + t + "_length"] = d.generateCodeGenerator(t, !0), e.Blocks["simple_move_" + t + "_length"] = d.generateMoveBlock(t, !0), e.Blocks["simple_move_" + t] = d.generateMoveBlock(t), e.Blocks["simple_jump_" + t] = d.generateMoveBlock("jump_" + t) }, generateMoveBlock: function (t, n) { var a = d.DIRECTION_CONFIGS[t], l = 12; return { helpUrl: "", init: function () { this.setHSV(184, 1, .74); var t = this.appendDummyInput(); if (a.isJump && t.appendTitle(i.jump()), t.appendTitle(new e.FieldLabel(a.title, { fixedSize: { width: l, height: 18 } })), t.appendTitle(a.imageDimensions ? new e.FieldImage(a.image, a.imageDimensions.width, a.imageDimensions.height) : new e.FieldImage(a.image)), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(a.tooltip), n) { var o = new e.FieldImageDropdown(a.lengths); o.setValue(u), t.appendTitle(o, "length") } } } }, generateCodeGenerator: function (e, t, n) { return function () { return n = n || d.DEFAULT_MOVE_LENGTH, t && (n = d[this.getTitleValue("length")]), "Turtle." + d.DIRECTION_CONFIGS[e].moveFunction + "(" + n + ",'block_id_" + this.id + "');\n" } } }; d.generateBlocksForAllDirections(), e.Blocks.jump.DIRECTIONS = [[l.jumpForward(), "jumpForward"], [l.jumpBackward(), "jumpBackward"]], r.jump = function () { var e = r.valueToCode(this, "VALUE", r.ORDER_NONE) || "0"; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.jump_by_constant = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.jump.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldTextInput("100", e.FieldTextInput.numberValidator), "VALUE").appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.jumpTooltip()) } }, e.Blocks.jump_by_constant_dropdown = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(e.Blocks.jump.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(new e.FieldDropdown, "VALUE").appendTitle(l.dots()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.jumpTooltip()) } }, r.jump_by_constant = function () { var e = window.parseFloat(this.getTitleValue("VALUE")) || 0; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, r.jump_by_constant_dropdown = r.jump_by_constant, e.Blocks.draw_turn = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendValueInput("VALUE").setCheck(e.BlockValueType.NUMBER).appendTitle(new e.FieldDropdown(e.Blocks.draw_turn.DIRECTIONS), "DIR"), this.appendDummyInput().appendTitle(l.degrees()), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.turnTooltip()) } }, e.Blocks.draw_turn.DIRECTIONS = [[l.turnRight(), "turnRight"], [l.turnLeft(), "turnLeft"]], r.draw_turn = function () { var e = r.valueToCode(this, "VALUE", r.ORDER_NONE) || "0"; return "Turtle." + this.getTitleValue("DIR") + "(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_width = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendValueInput("WIDTH").setCheck(e.BlockValueType.NUMBER).appendTitle(l.setWidth()), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.widthTooltip()) } }, r.draw_width = function () { var e = r.valueToCode(this, "WIDTH", r.ORDER_NONE) || "1"; return "Turtle.penWidth(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_width_inline = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.setInputsInline(!0), this.appendDummyInput().appendTitle(l.setWidth()), this.appendDummyInput().appendTitle(new e.FieldTextInput("1", e.FieldTextInput.numberValidator), "WIDTH"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.widthTooltip()) } }, r.draw_width_inline = function () { var e = this.getTitleValue("WIDTH"); return "Turtle.penWidth(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_pen = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.appendDummyInput().appendTitle(new e.FieldDropdown(this.STATE), "PEN"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.penTooltip()) } }, e.Blocks.draw_pen.STATE = [[l.penUp(), "penUp"], [l.penDown(), "penDown"]], r.draw_pen = function () { return "Turtle." + this.getTitleValue("PEN") + "('block_id_" + this.id + "');\n" }, e.Blocks.draw_colour = { helpUrl: "", init: function () { this.setHSV(196, 1, .79), this.appendValueInput("COLOUR").setCheck(e.BlockValueType.COLOUR).appendTitle(l.setColour()), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setInputsInline(!0), this.setTooltip(l.colourTooltip()) } }, e.Blocks.alpha = { init: function () { this.appendDummyInput().appendTitle(l.setAlpha()), this.appendValueInput("VALUE").setCheck("Number"), this.setInputsInline(!0), this.setPreviousStatement(!0, null), this.setNextStatement(!0, null), this.setHSV(196, 1, .79), this.setTooltip("") } }, r.alpha = function () { var e = r.valueToCode(this, "VALUE", Blockly.JavaScript.ORDER_NONE); return "Turtle.globalAlpha(" + e + ", 'block_id_" + this.id + "');\n" }, r.draw_colour = function () { var e = r.valueToCode(this, "COLOUR", r.ORDER_NONE) || "'#000000'"; return "Turtle.penColour(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_colour_simple = { init: function () { var e = [a.RED, a.BLACK, a.PINK, a.ORANGE, a.YELLOW, a.GREEN, a.BLUE, a.AQUAMARINE, a.PLUM]; this.setHSV(196, 1, .79); var t = new Blockly.FieldColourDropdown(e, 45, 35); this.appendDummyInput().appendTitle(l.setColour()).appendTitle(t, "COLOUR"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.colourTooltip()) } }, r.draw_colour_simple = function () { var e = this.getTitleValue("COLOUR") || "'#000000'"; return 'Turtle.penColour("' + e + "\", 'block_id_" + this.id + "');\n" }, e.Blocks.draw_line_style_pattern = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.setPreviousStatement(!0, null), this.setNextStatement(!0, null), this.appendDummyInput().appendTitle(l.setPattern()).appendTitle(new e.FieldImageDropdown(n.lineStylePatternOptions, 150, 20), "VALUE"), this.setTooltip(l.setPattern()) } }, r.draw_line_style_pattern = function () { var e = this.getTitleValue("VALUE") || "'DEFAULT'"; return 'Turtle.penPattern("' + e + "\", 'block_id_" + this.id + "');\n" }, e.Blocks.up_big = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.setPreviousStatement(!0, null), this.setNextStatement(!0, null), this.appendDummyInput().appendTitle(new e.FieldDropdown(this.STATE), "VISIBILITY"), this.setTooltip(l.turtleVisibilityTooltip()) } }, r.up_big = function () { var e = r.valueToCode(this, "COLOUR", r.ORDER_NONE) || "'#000000'"; return "Turtle.penColour(" + e + ", 'block_id_" + this.id + "');\n" }, e.Blocks.turtle_visibility = { helpUrl: "", init: function () { this.setHSV(184, 1, .74), this.setPreviousStatement(!0, null), this.setNextStatement(!0, null), this.appendDummyInput().appendTitle(new e.FieldDropdown(this.STATE), "VISIBILITY"), this.setTooltip(l.turtleVisibilityTooltip()) } }, e.Blocks.turtle_visibility.STATE = [[l.hideTurtle(), "hideTurtle"], [l.showTurtle(), "showTurtle"]], r.turtle_visibility = function () { return "Turtle." + this.getTitleValue("VISIBILITY") + "('block_id_" + this.id + "');\n" }, e.Blocks.sticker = e.Blocks.turtle_stamp = { helpUrl: "", init: function () { this.setHSV(184, 1, .74); var t, a = this.appendDummyInput(); a.appendTitle(l.drawSticker()); var i = []; for (var o in n.stickers) { var r = n.stickers[o]; i.push([r, o]) } t = new e.FieldImageDropdown(i, 40, 40), a.appendTitle(t, "VALUE"), this.setInputsInline(!0), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip(l.drawSticker()) } }, r.sticker = r.turtle_stamp = function () { return 'Turtle.drawSticker("' + this.getTitleValue("VALUE") + "\", 'block_id_" + this.id + "');\n" }, o.install(e, r, s) } }, { "../locale": "/home/ubuntu/staging/apps/build/js/locale.js", "./colours": "/home/ubuntu/staging/apps/build/js/turtle/colours.js", "./customLevelBlocks": "/home/ubuntu/staging/apps/build/js/turtle/customLevelBlocks.js", "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js", "./turtle": "/home/ubuntu/staging/apps/build/js/turtle/turtle.js" }], "/home/ubuntu/staging/apps/build/js/turtle/turtle.js": [function (e, t) {
        "use strict"; function n(e, t, n) { if (e > t && e > n) return { width: t, height: n }; var a, l; return t > n ? (a = e, l = n * (e / t)) : (l = e, a = t * (e / n)), { width: a, height: l } } var a = e("../color"), l = e("../locale"), i = e("./locale"), o = (e("./levels"), e("./colours"), e("../codegen")), r = e("./api"), s = e("./apiJavascript"), u = e("../templates/AppView"), c = e("../templates/codeWorkspace.html.ejs"), p = e("../templates/visualizationColumn.html.ejs"), h = e("../utils"), d = (e("../dropletUtils"), e("../slider")), m = h.getLodash(), b = e("./dropletConfig"), _ = e("../JSInterpreter"), k = e("../JsInterpreterLogger"), v = 400, f = 400, g = 100, w = 4, y = 5, T = 15, A = 50, R = [{ x: 15, when: "after" }, { x: 26, when: "after" }, { x: 37, when: "after" }, { x: 46, when: "after" }, { x: 60, when: "after" }, { x: 65, when: "after" }, { x: 66, when: "after" }, { x: 64, when: "after" }, { x: 62, when: "before" }, { x: 55, when: "before" }, { x: 48, when: "before" }, { x: 33, when: "before" }, { x: 31, when: "before" }, { x: 22, when: "before" }, { x: 17, when: "before" }, { x: 12, when: "before" }, { x: 8, when: "after" }, { x: 10, when: "after" }], x = function () { this.skin = null, this.level = null, this.api = new r, s.injectArtistAPI(this.api), this.JSInterpreter = null, this.consoleLogger_ = new k(window.console), this.lineStylePatternOptions = [], this.pid = 0, this.visible = !0, this.heading = 0, this.avatarImage = new Image, this.numberAvatarHeadings = void 0, this.decorationAnimationImage = new Image, this.currentPathPattern = new Image, this.loadedPathPatterns = [], this.isDrawingWithPattern = !1, this.avatarWidth = 0, this.avatarHeight = 0, this.decorationAnimationWidth = 85, this.decorationAnimationHeight = 85, this.speedSlider = null, this.ctxAnswer = null, this.ctxImages = null, this.ctxPredraw = null, this.ctxScratch = null, this.ctxPattern = null, this.ctxFeedback = null, this.ctxDisplay = null, this.isDrawingAnswer_ = !1, this.isPredrawing_ = !1 }; t.exports = x, x.prototype.injectStudioApp = function (e) { this.studioApp_ = e, this.studioApp_.reset = m.bind(this.reset, this), this.studioApp_.runButtonClick = m.bind(this.runButtonClick, this), this.studioApp_.setCheckForEmptyBlocks(!0) }, x.prototype.init = function (t) { if (!this.studioApp_) throw new Error("Artist requires a StudioApp"); this.skin = t.skin, this.level = t.level, this.stickers = {}; for (var n in this.skin.stickers) { var a = new Image; a.src = this.skin.stickers[n], this.stickers[n] = a } ("anna" == this.skin.id || "elsa" == this.skin.id) && (this.level.images = [{}], this.level.images[0].filename = "background.jpg", this.level.images[0].position = [0, 0], this.level.images[0].scale = 1), t.grayOutUndeletableBlocks = !0, t.forceInsertTopBlock = "when_run", t.dropletConfig = b, "anna" == this.skin.id ? (this.avatarWidth = 73, this.avatarHeight = 100) : "elsa" == this.skin.id ? (this.avatarWidth = 73, this.avatarHeight = 100, this.decorationAnimationWidth = 85, this.decorationAnimationHeight = 85) : (this.avatarWidth = 70, this.avatarHeight = 51); var l = "media/turtle/" + (t.isLegacyShare && t.hideSource ? "icons_white.png" : "icons.png"); t.loadAudio = m.bind(this.loadAudio_, this), t.afterInject = m.bind(this.afterInject_, this, t); var i = function () { return c({ assetUrl: this.studioApp_.assetUrl, data: { localeDirection: this.studioApp_.localeDirection(), blockUsed: void 0, idealBlockNumber: void 0, editCode: this.level.editCode, blockCounterClass: "block-counter-default", readonlyWorkspace: t.readonlyWorkspace } }) }.bind(this), o = function () { return p({ assetUrl: this.studioApp_.assetUrl, data: { visualization: "", controls: e("./controls.html.ejs")({ assetUrl: this.studioApp_.assetUrl, iconPath: l }) } }) }.bind(this); ReactDOM.render(React.createElement(u, { assetUrl: this.studioApp_.assetUrl, isEmbedView: !!t.embed, isShareView: !!t.share, hideSource: !!t.hideSource, noVisualization: !1, isRtl: this.studioApp_.isRtl(), generateCodeWorkspaceHtml: i, generateVisualizationColumnHtml: o, onMount: this.studioApp_.init.bind(this.studioApp_, t) }), document.getElementById(t.containerId)) }, x.prototype.loadAudio_ = function () { this.studioApp_.loadAudio(this.skin.winSound, "win"), this.studioApp_.loadAudio(this.skin.startSound, "start"), this.studioApp_.loadAudio(this.skin.failureSound, "failure") }, x.prototype.afterInject_ = function (e) { var t = document.getElementById("slider"); this.speedSlider = new d(10, 35, 130, t), e.level.sliderSpeed && this.speedSlider.setValue(e.level.sliderSpeed), this.studioApp_.isUsingBlockly() && Blockly.JavaScript.addReservedWords("Turtle,code"), this.ctxAnswer = this.createCanvas_("answer", 400, 400).getContext("2d"), this.ctxImages = this.createCanvas_("images", 400, 400).getContext("2d"), this.ctxPredraw = this.createCanvas_("predraw", 400, 400).getContext("2d"), this.ctxScratch = this.createCanvas_("scratch", 400, 400).getContext("2d"), this.ctxPattern = this.createCanvas_("pattern", 400, 400).getContext("2d"), this.ctxFeedback = this.createCanvas_("feedback", 154, 154).getContext("2d"); var n = this.createCanvas_("display", 400, 400), a = document.getElementById("visualization"); a.appendChild(n), this.ctxDisplay = n.getContext("2d"), !this.studioApp_.isUsingBlockly() || "anna" !== this.skin.id && "elsa" !== this.skin.id || (Blockly.JavaScript.colour_random = function () { if (!Blockly.JavaScript.definitions_.colour_random) { var e = Blockly.JavaScript.variableDB_.getDistinctName("colour_random", Blockly.Generator.NAME_TYPE); Blockly.JavaScript.colour_random.functionName = e; var t = []; t.push("function " + e + "() {"), t.push("   var colors = " + JSON.stringify(Blockly.FieldColour.COLOURS) + ";"), t.push("  return colors[Math.floor(Math.random()*colors.length)];"), t.push("}"), Blockly.JavaScript.definitions_.colour_random = t.join("\n") } var n = Blockly.JavaScript.colour_random.functionName + "()"; return [n, Blockly.JavaScript.ORDER_FUNCTION_CALL] }), this.loadDecorationAnimation(), this.loadTurtle(), this.drawImages(), this.isDrawingAnswer_ = !0, this.drawAnswer(), this.isDrawingAnswer_ = !1, this.level.predrawBlocks && (this.isPredrawing_ = !0, this.drawBlocksOnCanvas(this.level.predrawBlocks, this.ctxPredraw), this.isPredrawing_ = !1); var l = document.createElement("div"); l.style.display = "none", document.body.appendChild(l); for (var i = 0; i < this.skin.lineStylePatternOptions.length; i++) { var o = this.skin.lineStylePatternOptions[i][1]; if (this.skin[o]) { var r = new Image; r.src = this.skin[o], this.loadedPathPatterns[o] = r } } var s = document.getElementById("visualizationColumn"); s.style.width = "400px" }, x.prototype.drawAnswer = function () { this.level.solutionBlocks ? this.drawBlocksOnCanvas(this.level.solutionBlocks, this.ctxAnswer) : this.drawLogOnCanvas(this.level.answer, this.ctxAnswer) }, x.prototype.drawLogOnCanvas = function (e, t) { for (this.studioApp_.reset() ; e.length;) { var n = e.shift(); this.step(n[0], n.splice(1), { smoothAnimate: !1 }), this.resetStepInfo_() } t.globalCompositeOperation = "copy", t.drawImage(this.ctxScratch.canvas, 0, 0), t.globalCompositeOperation = "source-over" }, x.prototype.drawBlocksOnCanvas = function (e, t) { var n; if (this.studioApp_.isUsingBlockly()) { var a = Blockly.Xml.textToDom(e); Blockly.Xml.domToBlockSpace(Blockly.mainBlockSpace, a), n = Blockly.Generator.blockSpaceToCode("JavaScript") } else n = e; this.evalCode(n), this.studioApp_.isUsingBlockly() && Blockly.mainBlockSpace.clear(), this.drawCurrentBlocksOnCanvas(t) }, x.prototype.drawCurrentBlocksOnCanvas = function (e) { this.drawLogOnCanvas(this.api.log, e) }, x.prototype.placeImage = function (e, t, n) { var a = new Image; a.onload = m.bind(function () { 0 !== a.width && (n ? this.ctxImages.drawImage(a, t[0], t[1], a.width, a.height, 0, 0, a.width * n, a.height * n) : this.ctxImages.drawImage(a, t[0], t[1])), this.display() }, this), a.src = "anna" == this.skin.id || "elsa" == this.skin.id ? this.skin.assetUrl(e) : this.studioApp_.assetUrl("media/turtle/" + e) }, x.prototype.drawImages = function () { if (this.level.images) { for (var e = 0; e < this.level.images.length; e++) { var t = this.level.images[e]; this.placeImage(t.filename, t.position, t.scale) } this.ctxImages.globalCompositeOperation = "copy", this.ctxImages.drawImage(this.ctxScratch.canvas, 0, 0), this.ctxImages.globalCompositeOperation = "source-over" } }, x.prototype.loadTurtle = function () { this.avatarImage.onload = m.bind(this.display, this), this.avatarImage.src = this.skin.avatar, this.numberAvatarHeadings = "anna" == this.skin.id ? 36 : "elsa" == this.skin.id ? 18 : 180, this.avatarImage.spriteHeight = this.avatarHeight, this.avatarImage.spriteWidth = this.avatarWidth }, x.prototype.loadDecorationAnimation = function () { "elsa" == this.skin.id && (this.decorationAnimationImage.src = this.skin.decorationAnimation, this.decorationAnimationImage.height = this.decorationAnimationHeight, this.decorationAnimationImage.width = this.decorationAnimationWidth) }; var I = 0; x.prototype.drawTurtle = function () { var e, t = Math.floor(this.heading * this.numberAvatarHeadings / 360); ("anna" == this.skin.id || "elsa" == this.skin.id) && (t = this.numberAvatarHeadings - t, t = (t + this.numberAvatarHeadings / 2) % this.numberAvatarHeadings); var n = this.avatarImage.spriteWidth * t; "anna" == this.skin.id || "elsa" == this.skin.id ? (e = this.avatarImage.spriteHeight * I, I = (I + 1) % this.skin.turtleNumFrames) : e = 0; var a = this.avatarImage.spriteWidth, l = this.avatarImage.spriteHeight, i = this.avatarImage.spriteWidth, o = this.avatarImage.spriteHeight, r = this.x - i / 2, s = this.y - o + 7; return 0 !== this.avatarImage.width && 0 !== this.avatarImage.height ? 0 > n || 0 > e || n + a - 0 > this.avatarImage.width || e + l > this.avatarImage.height ? void (console && console.log) : void (0 !== this.avatarImage.width && this.ctxDisplay.drawImage(this.avatarImage, Math.round(n), Math.round(e), a - 0, l, Math.round(r), Math.round(s), i - 0, o)) : void 0 }, x.prototype.drawDecorationAnimation = function (e) { if ("elsa" == this.skin.id) { var t = (I + 10) % this.skin.decorationAnimationNumFrames, n = Math.floor(this.heading * this.numberAvatarHeadings / 360); if (n = this.numberAvatarHeadings - n, n = (n + this.numberAvatarHeadings / 2) % this.numberAvatarHeadings, R[n].when == e) { var a = this.decorationAnimationImage.width * t, l = 0, i = this.decorationAnimationImage.width, o = this.decorationAnimationImage.height, r = i, s = o, u = this.x - r / 2 - 15 - 15 + R[n].x, c = this.y - s / 2 - 100; 0 !== this.decorationAnimationImage.width && this.ctxDisplay.drawImage(this.decorationAnimationImage, Math.round(a), Math.round(l), i, o, Math.round(u), Math.round(c), r, s) } } }, x.prototype.reset = function () {
            this.x = v / 2, this.y = f / 2, this.heading = void 0 !== this.level.startDirection ? this.level.startDirection : 90, this.penDownValue = !0, this.visible = !0, void 0 !== this.level.initialX && (this.x = this.level.initialX), void 0 !== this.level.initialY && (this.y = this.level.initialY), this.ctxScratch.canvas.width = this.ctxScratch.canvas.width, this.ctxPattern.canvas.width = this.ctxPattern.canvas.width, "anna" == this.skin.id ? (this.ctxScratch.strokeStyle = "rgb(255,255,255)", this.ctxScratch.fillStyle = "rgb(255,255,255)", this.ctxScratch.lineWidth = 2) : "elsa" == this.skin.id ? (this.ctxScratch.strokeStyle = "rgb(255,255,255)", this.ctxScratch.fillStyle = "rgb(255,255,255)", this.ctxScratch.lineWidth = 2) : (this.ctxScratch.strokeStyle = "#000000", this.ctxScratch.fillStyle = "#000000", this.ctxScratch.lineWidth = 5), this.ctxScratch.lineCap = "round", this.ctxScratch.font = "normal 18pt Arial", this.display(), this.ctxFeedback.clearRect(0, 0, this.ctxFeedback.canvas.width, this.ctxFeedback.canvas.height), this.setPattern("anna" == this.skin.id ? "annaLine" : "elsa" == this.skin.id ? "elsaLine" : null), this.pid && window.clearTimeout(this.pid), this.pid = 0, this.consoleLogger_.detach(), this.JSInterpreter && (this.JSInterpreter.deinitialize(), this.JSInterpreter = null), this.executionError = null, this.studioApp_.stopLoopingAudio("start"), this.resetStepInfo_()
        }, x.prototype.display = function () { var e = this.ctxDisplay.fillStyle; this.ctxDisplay.fillStyle = a.white, this.ctxDisplay.clearRect(0, 0, this.ctxDisplay.canvas.width, this.ctxDisplay.canvas.width), this.ctxDisplay.fillStyle = e, this.ctxDisplay.globalCompositeOperation = "copy", this.ctxDisplay.globalCompositeOperation = "source-over", this.ctxDisplay.drawImage(this.ctxImages.canvas, 0, 0), this.ctxDisplay.globalAlpha = "anna" == this.skin.id || "elsa" == this.skin.id ? .4 : .15, this.ctxDisplay.drawImage(this.ctxAnswer.canvas, 0, 0), this.ctxDisplay.globalAlpha = 1, this.ctxDisplay.globalCompositeOperation = "source-over", this.ctxDisplay.drawImage(this.ctxPredraw.canvas, 0, 0), this.ctxDisplay.globalCompositeOperation = "source-over", this.ctxDisplay.drawImage(this.ctxPattern.canvas, 0, 0), this.ctxDisplay.globalCompositeOperation = "source-over", this.ctxDisplay.drawImage(this.ctxScratch.canvas, 0, 0), this.visible && (this.drawDecorationAnimation("before"), this.drawTurtle(), this.drawDecorationAnimation("after")) }, x.prototype.runButtonClick = function () { this.studioApp_.toggleRunReset("reset"), document.getElementById("spinner").style.visibility = "visible", this.studioApp_.isUsingBlockly() && Blockly.mainBlockSpace.traceOn(!0), this.studioApp_.attempts++, this.execute() }, x.prototype.evalCode = function (e) { try { o.evalWith(e, { Turtle: this.api }) } catch (t) { t !== 1 / 0 && (window.onerror && window.onerror("UserCode:" + t.message, document.URL, 0), window.alert(t)) } }, x.prototype.initInterpreter = function () { this.level.editCode && (this.JSInterpreter = new _({ studioApp: this.studioApp_, shouldRunAtMaxSpeed: function () { return !1 } }), this.JSInterpreter.onExecutionError.register(this.handleExecutionError.bind(this)), this.consoleLogger_.attachTo(this.JSInterpreter), this.JSInterpreter.parse({ code: this.studioApp_.getCode(), blocks: b.blocks, blockFilter: this.level.executePaletteApisOnly && this.level.codeFunctions })) }, x.prototype.handleExecutionError = function (e, t) { this.consoleLogger_.log(e), this.executionError = { err: e, lineNumber: t }, e instanceof SyntaxError && (this.testResults = this.studioApp_.TestResults.SYNTAX_ERROR_FAIL), this.finishExecution_() }, x.prototype.execute = function () { return this.api.log = [], this.studioApp_.reset(), this.studioApp_.hasExtraTopBlocks() || this.studioApp_.hasDuplicateVariablesInForLoops() ? void this.checkAnswer() : (this.level.editCode ? this.initInterpreter() : (this.code = Blockly.Generator.blockSpaceToCode("JavaScript"), this.evalCode(this.code)), this.studioApp_.playAudio("start", { loop: !0 }), this.pid = window.setTimeout(m.bind(this.animate, this), 100), void (this.studioApp_.isUsingBlockly() && Blockly.mainBlockSpaceEditor.setEnableToolbox(!1))) }, x.prototype.checkforTurnAndMove_ = function () { var e = !1, t = this.api.log[0], n = t[0], a = t.slice(1); if ("RT" === n) { var l = a[0]; if (Math.abs(l) <= 10 && this.api.log.length > 1) { var i = this.api.log[1], o = i[0]; "FD" === o && (e = !0) } } return e }, x.prototype.executeTuple_ = function () { if (0 === this.api.log.length) return !1; var e; do { e = !1; var t = this.api.log[0], n = t[0], a = t[t.length - 1]; this.studioApp_.highlight(String(a)), this.skin.consolidateTurnAndMove && this.checkforTurnAndMove_() && (e = !0); var l = this.step(n, t.slice(1), { smoothAnimate: this.skin.smoothAnimate && !e }); this.display(), l && (this.api.log.shift(), this.resetStepInfo_()) } while (e); return !0 }, x.prototype.finishExecution_ = function () { document.getElementById("spinner").style.visibility = "hidden", this.studioApp_.isUsingBlockly() && Blockly.mainBlockSpace.highlightBlock(null), this.checkAnswer() }, x.prototype.animate = function () { this.pid = 0; var e = 1e3 * Math.pow(1 - this.speedSlider.getValue(), 2) / this.skin.speedModifier; if (this.smoothAnimateStepSize = 0 === e ? T : y, this.level.editCode && this.JSInterpreter && this.JSInterpreter.initialized()) { var t = !1, n = !1; do t = this.JSInterpreter.isProgramDone(), t || (this.JSInterpreter.executeInterpreter(), n = this.executeTuple_()); while (!t && !n); if (n || (n = this.executeTuple_()), t && !n) return void this.finishExecution_() } else if (!this.executeTuple_()) return void this.finishExecution_(); this.pid = window.setTimeout(m.bind(this.animate, this), e) }, x.prototype.calculateSmoothAnimate = function (e, t) { var n = !0, a = this.stepDistanceCovered; if (e && e.smoothAnimate) { var l = t, i = this.smoothAnimateStepSize; 0 > l ? l >= a - i ? (t = l - a, a = l) : (t = -i, a -= i, n = !1) : a + i >= l ? (t = l - a, a = l) : (t = i, a += i, n = !1) } return this.stepDistanceCovered = a, { tupleDone: n, distance: t } }, x.prototype.step = function (e, t, a) { var l, i, o, r = !0; switch (e) { case "FD": i = t[0], l = this.calculateSmoothAnimate(a, i), r = l.tupleDone, this.moveForward_(l.distance); break; case "JF": i = t[0], l = this.calculateSmoothAnimate(a, i), r = l.tupleDone, this.jumpForward_(l.distance); break; case "MV": i = t[0], o = t[1], l = this.calculateSmoothAnimate(a, i), r = l.tupleDone, this.setHeading_(o), this.moveForward_(l.distance); break; case "JD": i = t[0], o = t[1], l = this.calculateSmoothAnimate(a, i), r = l.tupleDone, this.setHeading_(o), this.jumpForward_(l.distance); break; case "RT": i = t[0], l = this.calculateSmoothAnimate(a, i), r = l.tupleDone, this.turnByDegrees_(l.distance); break; case "DP": this.ctxScratch.save(), this.ctxScratch.translate(this.x, this.y), this.ctxScratch.rotate(h.degreesToRadians(this.heading - 90)), this.ctxScratch.fillText(t[0], 0, 0), this.ctxScratch.restore(); break; case "GA": var s = t[0]; s = Math.max(0, s), s = Math.min(100, s), this.ctxScratch.globalAlpha = s / 100; break; case "DF": this.ctxScratch.font = t[2] + " " + t[1] + "pt " + t[0]; break; case "PU": this.penDownValue = !1; break; case "PD": this.penDownValue = !0; break; case "PW": this.ctxScratch.lineWidth = t[0]; break; case "PC": this.ctxScratch.strokeStyle = t[0], this.ctxScratch.fillStyle = t[0], "anna" != this.skin.id && "elsa" != this.skin.id && (this.isDrawingWithPattern = !1); break; case "PS": this.setPattern(t[0] && "DEFAULT" != t[0] ? t[0] : null); break; case "HT": this.visible = !1; break; case "ST": this.visible = !0; break; case "sticker": var u = this.stickers[t[0]], c = n(g, u.width, u.height), p = c.width, d = c.height; this.ctxScratch.save(), this.ctxScratch.translate(this.x, this.y), this.ctxScratch.rotate(h.degreesToRadians(this.heading)), this.ctxScratch.drawImage(u, -p / 2, -d, p, d), this.ctxScratch.restore() } return r }, x.prototype.setPattern = function (e) { this.loadedPathPatterns[e] ? (this.currentPathPattern = this.loadedPathPatterns[e], this.isDrawingWithPattern = !0) : null === e && (this.currentPathPattern = new Image, this.isDrawingWithPattern = !1) }, x.prototype.jumpForward_ = function (e) { this.x += e * Math.sin(h.degreesToRadians(this.heading)), this.y -= e * Math.cos(h.degreesToRadians(this.heading)) }, x.prototype.moveByRelativePosition_ = function (e, t) { this.x += e, this.y += t }, x.prototype.dotAt_ = function (e, t) { var n = .1; this.ctxScratch.lineTo(e + n, t) }, x.prototype.circleAt_ = function (e, t, n) { this.ctxScratch.arc(e, t, n, 0, 2 * Math.PI) }, x.prototype.drawToTurtle_ = function (e) { var t = 0 === e; t ? this.dotAt_(this.x, this.y) : this.ctxScratch.lineTo(this.x, this.y) }, x.prototype.turnByDegrees_ = function (e) { this.setHeading_(this.heading + e) }, x.prototype.setHeading_ = function (e) { e = this.constrainDegrees_(e), this.heading = e }, x.prototype.constrainDegrees_ = function (e) { return e %= 360, 0 > e && (e += 360), e }, x.prototype.moveForward_ = function (e) { return this.penDownValue ? void (this.isDrawingWithPattern && (this.drawForwardLineWithPattern_(e), "elsa" != this.skin.id && "anna" != this.skin.id) || this.drawForward_(e)) : void this.jumpForward_(e) }, x.prototype.drawForward_ = function (e) { this.shouldDrawJoints_() ? this.drawForwardWithJoints_(e) : this.drawForwardLine_(e) }, x.prototype.drawForwardWithJoints_ = function (e) { for (var t = e; t > 0;) { var n = t >= A, a = n ? A : t; t -= a, n && this.drawJointAtTurtle_(), this.drawForwardLine_(a), n && this.drawJointAtTurtle_() } }, x.prototype.drawForwardLine_ = function (e) { "anna" == this.skin.id || "elsa" == this.skin.id ? (this.ctxScratch.beginPath(), this.ctxScratch.moveTo(this.stepStartX, this.stepStartY), this.jumpForward_(e), this.drawToTurtle_(e), this.ctxScratch.stroke()) : (this.ctxScratch.beginPath(), this.ctxScratch.moveTo(this.x, this.y), this.jumpForward_(e), this.drawToTurtle_(e), this.ctxScratch.stroke()) }, x.prototype.drawForwardLineWithPattern_ = function (e) { var t, n, a; if ("anna" == this.skin.id || "elsa" == this.skin.id) { this.ctxPattern.moveTo(this.stepStartX, this.stepStartY), t = this.currentPathPattern, n = this.stepStartX, a = this.stepStartY; var l = Math.abs(this.stepDistanceCovered); this.ctxPattern.save(), this.ctxPattern.translate(n, a), this.ctxPattern.rotate(h.degreesToRadians(this.heading - 90)); var i; i = l % this.smoothAnimateStepSize === 0 ? this.smoothAnimateStepSize : l > this.smoothAnimateStepSize ? l % this.smoothAnimateStepSize : l, 0 !== t.width && this.ctxPattern.drawImage(t, Math.round(l), 0, i, t.height, Math.round(this.stepDistanceCovered - i - 2), Math.round(-18), i, t.height), this.ctxPattern.restore() } else this.ctxScratch.moveTo(this.x, this.y), t = this.currentPathPattern, n = this.x, a = this.y, this.jumpForward_(e), this.ctxScratch.save(), this.ctxScratch.translate(n, a), this.ctxScratch.rotate(h.degreesToRadians(this.heading - 90)), 0 !== t.width && this.ctxScratch.drawImage(t, 0, 0, e + t.height / 2, t.height, -t.height / 4, -t.height / 2, e + t.height / 2, t.height), this.ctxScratch.restore() }, x.prototype.shouldDrawJoints_ = function () { return this.level.isK1 && !this.isPredrawing_ }, x.prototype.drawJointAtTurtle_ = function () { this.ctxScratch.beginPath(), this.ctxScratch.moveTo(this.x, this.y), this.circleAt_(this.x, this.y, w), this.ctxScratch.stroke() }, x.prototype.isCorrect_ = function (e, t) { return t >= e }, x.prototype.displayFeedback_ = function () { var e; e = "anna" == this.skin.id || "elsa" == this.skin.id ? this.ctxDisplay : this.ctxScratch; var t = this.level; this.studioApp_.displayFeedback({ app: "turtle", skin: this.skin.id, feedbackType: this.testResults, message: this.message, response: this.response, level: t, feedbackImage: e.canvas.toDataURL("image/png"), showingSharing: !t.disableSharing && (t.freePlay || t.impressive), alreadySaved: t.impressive, saveToGalleryUrl: t.freePlay && this.response && this.response.save_to_gallery_url, appStrings: { reinfFeedbackMsg: i.reinfFeedbackMsg(), sharingText: i.shareDrawing() } }) }, x.prototype.onReportComplete = function (e) { this.response = e; var t = document.getElementById("runButton"); t.disabled = !1, this.studioApp_.onReportComplete(e), this.displayFeedback_() }; var E = function S(e) { return e.replace(S.regex, '">') }; E.regex = /_length"><title name="length">.*?<\/title>/, x.prototype.checkAnswer = function () { for (var e = this.ctxScratch.getImageData(0, 0, f, v), t = this.ctxAnswer.getImageData(0, 0, f, v), n = Math.min(e.data.length, t.data.length), a = 0, o = 3; n > o; o += 4) Math.abs(e.data[o] - t.data[o]) > 250 && a++; var r = this.level, s = r.permittedErrors || 0, u = !(!r.freePlay && !this.isCorrect_(a, s) || r.editCode && this.executionError); this.testResults = this.studioApp_.getTestResults(u); var c; if (this.studioApp_.isUsingBlockly()) { var p = Blockly.Xml.blockSpaceToDom(Blockly.mainBlockSpace); c = Blockly.Xml.domToText(p) } if (this.message = void 0, r.isK1 && !u && !this.studioApp_.editCode && r.solutionBlocks && E(c) === E(r.solutionBlocks) && (this.testResults = this.studioApp_.TestResults.APP_SPECIFIC_ERROR, this.message = i.lengthFeedback()), r.failForTooManyBlocks && this.testResults == this.studioApp_.TestResults.TOO_MANY_BLOCKS_FAIL) this.testResults = this.studioApp_.TestResults.TOO_MANY_BLOCKS_FAIL; else if ((this.testResults == this.studioApp_.TestResults.TOO_MANY_BLOCKS_FAIL || this.testResults == this.studioApp_.TestResults.ALL_PASS) && r.failForCircleRepeatValue && this.studioApp_.isUsingBlockly()) { var h = Blockly.Generator.blockSpaceToCode("JavaScript"); -1 == h.indexOf("count < 3") && (this.testResults = this.studioApp_.TestResults.APP_SPECIFIC_ACCEPTABLE_FAIL, this.message = l.tooMuchWork()) } r.editCode && (c = this.studioApp_.editor.getValue()), r.freePlay && (this.testResults = this.studioApp_.TestResults.FREE_PLAY), this.studioApp_.stopLoopingAudio("start"), this.studioApp_.playAudio(this.testResults === this.studioApp_.TestResults.FREE_PLAY || this.testResults >= this.studioApp_.TestResults.TOO_MANY_BLOCKS_FAIL ? "win" : "failure"); var d = { app: "turtle", level: r.id, builder: r.builder, result: u, testResult: this.testResults, program: encodeURIComponent(c), onComplete: m.bind(this.onReportComplete, this), save_to_gallery: r.impressive }, b = "anna" === this.skin.id || "elsa" === this.skin.id; this.testResults >= this.studioApp_.TestResults.TOO_MANY_BLOCKS_FAIL && !b && (r.freePlay || r.impressive) && (d.image = this.getFeedbackImage_()), this.studioApp_.report(d), this.studioApp_.isUsingBlockly() && Blockly.mainBlockSpaceEditor.setEnableToolbox(!0) }, x.prototype.getFeedbackImage_ = function () { var e; e = "anna" == this.skin.id || "elsa" == this.skin.id ? this.ctxDisplay : this.ctxScratch, this.ctxFeedback.globalCompositeOperation = "copy", this.ctxFeedback.drawImage(e.canvas, 0, 0, 154, 154); var t = this.ctxFeedback.canvas; return encodeURIComponent(t.toDataURL("image/png").split(",")[1]) }, x.prototype.createCanvas_ = function (e, t, n) { var a = document.createElement("canvas"); return a.id = e, a.width = t, a.height = n, a }, x.prototype.resetStepInfo_ = function () { this.stepStartX = this.x, this.stepStartY = this.y, this.stepDistanceCovered = 0 }
    }, { "../JSInterpreter": "/home/ubuntu/staging/apps/build/js/JSInterpreter.js", "../JsInterpreterLogger": "/home/ubuntu/staging/apps/build/js/JsInterpreterLogger.js", "../codegen": "/home/ubuntu/staging/apps/build/js/codegen.js", "../color": "/home/ubuntu/staging/apps/build/js/color.js", "../dropletUtils": "/home/ubuntu/staging/apps/build/js/dropletUtils.js", "../locale": "/home/ubuntu/staging/apps/build/js/locale.js", "../slider": "/home/ubuntu/staging/apps/build/js/slider.js", "../templates/AppView": "/home/ubuntu/staging/apps/build/js/templates/AppView.jsx", "../templates/codeWorkspace.html.ejs": "/home/ubuntu/staging/apps/build/js/templates/codeWorkspace.html.ejs", "../templates/visualizationColumn.html.ejs": "/home/ubuntu/staging/apps/build/js/templates/visualizationColumn.html.ejs", "../utils": "/home/ubuntu/staging/apps/build/js/utils.js", "./api": "/home/ubuntu/staging/apps/build/js/turtle/api.js", "./apiJavascript": "/home/ubuntu/staging/apps/build/js/turtle/apiJavascript.js", "./colours": "/home/ubuntu/staging/apps/build/js/turtle/colours.js", "./controls.html.ejs": "/home/ubuntu/staging/apps/build/js/turtle/controls.html.ejs", "./dropletConfig": "/home/ubuntu/staging/apps/build/js/turtle/dropletConfig.js", "./levels": "/home/ubuntu/staging/apps/build/js/turtle/levels.js", "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js" }], "/home/ubuntu/staging/apps/build/js/turtle/levels.js": [function (e, t) { "use strict"; var n = e("../level_base"), a = (e("./colours"), e("./answers").answer), l = e("./locale"), i = e("../block_utils"), o = e("../utils"), r = 7, s = function (t, n) { return e("./toolbox.xml.ejs")({ page: t, level: n }) }, u = function (t, n) { return e("./startBlocks.xml.ejs")({ page: t, level: n }) }, c = e("./requiredBlocks"), p = c.makeMathNumber, h = c.simpleBlock, d = c.repeat, m = c.drawASquare, b = c.drawASnowman, _ = c.MOVE_FORWARD_INLINE, k = c.MOVE_FORWARD_OR_BACKWARD_INLINE, v = c.moveForwardInline, f = c.MOVE_BACKWARD_INLINE, g = c.turnLeftRestricted, w = c.turnRightRestricted, y = c.turnRightByConstant, T = c.turnRight, A = c.turnLeft, R = c.move, x = c.drawTurnRestricted, I = c.drawTurn, E = (c.SET_COLOUR_PICKER, c.SET_COLOUR_RANDOM, c.defineWithArg), S = { SIMPLE_MOVE_UP: i.blockOfType("simple_move_up"), SIMPLE_MOVE_DOWN: i.blockOfType("simple_move_down"), SIMPLE_MOVE_LEFT: i.blockOfType("simple_move_left"), SIMPLE_MOVE_RIGHT: i.blockOfType("simple_move_right"), SIMPLE_JUMP_UP: i.blockOfType("simple_jump_up"), SIMPLE_JUMP_DOWN: i.blockOfType("simple_jump_down"), SIMPLE_JUMP_LEFT: i.blockOfType("simple_jump_left"), SIMPLE_JUMP_RIGHT: i.blockOfType("simple_jump_right"), SIMPLE_MOVE_UP_LENGTH: i.blockOfType("simple_move_up_length"), SIMPLE_MOVE_DOWN_LENGTH: i.blockOfType("simple_move_down_length"), SIMPLE_MOVE_LEFT_LENGTH: i.blockOfType("simple_move_left_length"), SIMPLE_MOVE_RIGHT_LENGTH: i.blockOfType("simple_move_right_length"), simpleMoveBlocks: function () { return this.SIMPLE_MOVE_UP + this.SIMPLE_MOVE_DOWN + this.SIMPLE_MOVE_LEFT + this.SIMPLE_MOVE_RIGHT }, simpleJumpBlocks: function () { return this.SIMPLE_JUMP_UP + this.SIMPLE_JUMP_DOWN + this.SIMPLE_JUMP_LEFT + this.SIMPLE_JUMP_RIGHT }, simpleMoveLengthBlocks: function () { return this.SIMPLE_MOVE_UP_LENGTH + this.SIMPLE_MOVE_DOWN_LENGTH + this.SIMPLE_MOVE_LEFT_LENGTH + this.SIMPLE_MOVE_RIGHT_LENGTH } }, L = t.exports = { "1_1": { answer: a(1, 1), ideal: 4, toolbox: s(1, 1), startBlocks: u(1, 1), requiredBlocks: [[_], [w(90)]], freePlay: !1 }, "1_2": { answer: a(1, 2), ideal: 11, toolbox: s(1, 2), startBlocks: u(1, 2), requiredBlocks: [[_], [w(90)]], freePlay: !1 }, "1_3": { answer: a(1, 3), ideal: 4, toolbox: s(1, 3), startBlocks: u(1, 3), requiredBlocks: [[_], [w(90)], [d(4)]], freePlay: !1 }, "1_4": { answer: a(1, 4), ideal: 6, toolbox: s(1, 4), startBlocks: u(1, 4), requiredBlocks: [[k], [d(3)], [{ test: function (e) { return "draw_turn_by_constant_restricted" == e.type }, type: "draw_turn_by_constant", titles: { VALUE: "???" } }]], freePlay: !1 }, "1_5": { answer: a(1, 5), ideal: 7, toolbox: s(1, 5), startBlocks: u(1, 5), requiredBlocks: [[d(3)], [w(120)], [_]], freePlay: !1 }, "1_6": { answer: a(1, 6), ideal: 8, toolbox: s(1, 6), startBlocks: u(1, 6), requiredBlocks: [[d(3)], [w(120), g(120)], [_, f]], freePlay: !1 }, "1_7": { answer: a(1, 7), ideal: 13, toolbox: s(1, 7), startBlocks: u(1, 7), requiredBlocks: [[x(90)], [_], [d(4)], [f, _]], freePlay: !1, startDirection: 0 }, "1_8": { answer: a(1, 8), ideal: 7, toolbox: s(1, 8), startBlocks: u(1, 8), requiredBlocks: [[d(8)]], freePlay: !1 }, "1_9": { answer: a(1, 9), ideal: 6, toolbox: s(1, 9), startBlocks: u(1, 9), requiredBlocks: [], freePlay: !1, sliderSpeed: .9, permittedErrors: 10, failForCircleRepeatValue: !0 }, "1_10": { answer: a(1, 10), toolbox: s(1, 10), startBlocks: u(1, 10), requiredBlocks: [], freePlay: !0 }, "2_1": { answer: a(2, 1), ideal: 8, toolbox: s(2, 1), startBlocks: u(2, 1), requiredBlocks: [[d(4)], [{ test: function (e) { return "draw_turn" == e.type }, type: "draw_turn", titles: { DIR: "turnRight" }, values: { VALUE: p(90) } }], [{ test: function (e) { return "draw_move" == e.type }, type: "draw_move", values: { VALUE: p(100) } }]], freePlay: !1 }, "2_2": { answer: a(2, 2), ideal: 5, toolbox: s(2, 2), startBlocks: u(2, 2), requiredBlocks: [[m("??")]], freePlay: !1 }, "2_3": { answer: a(2, 3), ideal: 8, toolbox: s(2, 3), startBlocks: u(2, 3), requiredBlocks: [[d(3)], [m(100)], [I()]], freePlay: !1 }, "2_4": { answer: a(2, 4), ideal: 8, toolbox: s(2, 4), startBlocks: u(2, 4), freePlay: !1, impressive: !0 }, "2_5": { answer: a(2, 5), ideal: 11, toolbox: s(2, 5), startBlocks: u(2, 5), requiredBlocks: [[m("??")]], freePlay: !1 }, "2_6": { answer: a(2, 6), ideal: 7, toolbox: s(2, 6), startBlocks: u(2, 6), requiredBlocks: [[h("variables_get_counter")]], freePlay: !1 }, "2_7": { minWorkspaceHeight: 1200, answer: a(2, 7), ideal: 9, toolbox: s(2, 7), startBlocks: u(2, 7), requiredBlocks: [[h("controls_for_counter")], [R("??")], [h("variables_get_counter")], [T(90)]], freePlay: !1 }, "2_7_5": { answer: a(2, 7.5), initialY: 300, ideal: 5, toolbox: s(2, 8), startBlocks: u(2, 7.5), requiredBlocks: [[b(250)], [b(100)]], freePlay: !1, sliderSpeed: .9, startDirection: 0 }, "2_8": { answer: a(2, 8), initialX: 100, ideal: 12, toolbox: s(2, 8), startBlocks: u(2, 8), requiredBlocks: [[b(150)], [T(90)], [A(90)], [{ test: "jump", type: "jump", values: { VALUE: p(100) } }], [h("jump")], [d(3)]], freePlay: !1, sliderSpeed: .9, startDirection: 0 }, "2_9": { answer: a(2, 9), initialX: 100, ideal: 15, toolbox: s(2, 9), startBlocks: u(2, 9), requiredBlocks: [[b("??")], [h("controls_for_counter")], [h("variables_get_counter")], [T(90)], [A(90)], [{ test: "jump", type: "jump", values: { VALUE: p(60) } }]], freePlay: !1, sliderSpeed: .9, startDirection: 0 }, "2_10": { answer: a(2, 10), freePlay: !0, toolbox: s(2, 10), startBlocks: u(2, 10) }, "3_1": { answer: a(3, 1), ideal: 14, toolbox: s(3, 1), startBlocks: u(3, 1), requiredBlocks: [[n.call(l.drawASquare())]], freePlay: !1 }, "3_2": { answer: a(3, 2), ideal: 14, toolbox: s(3, 2), startBlocks: u(3, 2), requiredBlocks: [[d(3)], [R(100)], [T(120)], [n.call(l.drawATriangle())]], freePlay: !1 }, "3_3": { answer: a(3, 3), initialY: 350, ideal: 20, toolbox: s(3, 3), startBlocks: u(3, 3), requiredBlocks: [[n.call(l.drawATriangle())], [R(100)], [n.call(l.drawASquare())]], freePlay: !1, images: [{ filename: "cat.svg", position: [170, 247] }, { filename: "cat.svg", position: [170, 47] }, { filename: "cow.svg", position: [182, 147] }], startDirection: 0 }, "3_4": { answer: a(3, 4), ideal: 19, toolbox: s(3, 4), startBlocks: u(3, 4), requiredBlocks: [[n.call(l.drawASquare())], [R(100)], [T(30)], [n.call(l.drawATriangle())]], freePlay: !1, images: [{ filename: "lion.svg", position: [195, 97] }], startDirection: 0 }, "3_5": { answer: a(3, 5), ideal: 21, toolbox: s(3, 5), startBlocks: u(3, 5), requiredBlocks: [[n.define(l.drawAHouse())], [n.call(l.drawASquare())], [R(100)], [T(30)], [n.call(l.drawATriangle())], [n.call(l.drawAHouse())]], freePlay: !1, images: [{ filename: "cat.svg", position: [170, 90] }, { filename: "cat.svg", position: [222, 90] }], startDirection: 0 }, "3_6": { answer: a(3, 6), initialY: 350, ideal: 23, toolbox: s(3, 6), startBlocks: u(3, 6), requiredBlocks: [[E(l.drawATriangle(), l.lengthParameter())], [h("variables_get_length")], [n.callWithArg(l.drawATriangle(), l.lengthParameter())]], disableParamEditing: !1, freePlay: !1, images: [{ filename: "lion.svg", position: [185, 100] }, { filename: "cat.svg", position: [175, 248] }], startDirection: 0 }, "3_7": { answer: a(3, 7), initialY: 350, ideal: 24, toolbox: s(3, 7), startBlocks: u(3, 7), requiredBlocks: [[E(l.drawAHouse(), l.lengthParameter())], [n.callWithArg(l.drawASquare(), l.lengthParameter())], [n.callWithArg(l.drawATriangle(), l.lengthParameter())], [h("variables_get_length")], [n.callWithArg(l.drawAHouse(), l.lengthParameter())]], freePlay: !1, images: [{ filename: "elephant.svg", position: [205, 220] }], startDirection: 0, disableParamEditing: !1 }, "3_8": { minWorkspaceHeight: 1200, answer: a(3, 8), initialX: 20, initialY: 350, ideal: 40, toolbox: s(3, 8), startBlocks: u(3, 8), freePlay: !1, images: [{ filename: "cat.svg", position: [16, 170] }, { filename: "lion.svg", position: [15, 250] }, { filename: "elephant.svg", position: [127, 220] }, { filename: "cow.svg", position: [255, 250] }], startDirection: 0, disableParamEditing: !1 }, "3_9": { minWorkspaceHeight: 1200, answer: a(3, 9), initialX: 20, initialY: 350, ideal: 40, toolbox: s(3, 9), startBlocks: u(3, 9), requiredBlocks: [[E(l.drawAHouse(), l.lengthParameter())], [n.callWithArg(l.drawASquare(), l.lengthParameter())], [n.callWithArg(l.drawATriangle(), l.lengthParameter())], [h("variables_get_length")], [n.callWithArg(l.drawAHouse(), l.lengthParameter())]], freePlay: !1, images: [{ filename: "cat.svg", position: [-10, 270] }, { filename: "cow.svg", position: [53, 250] }, { filename: "elephant.svg", position: [175, 220] }], failForTooManyBlocks: !0, startDirection: 0, disableParamEditing: !1 }, "3_10": { minWorkspaceHeight: 1600, answer: a(3, 10), freePlay: !0, toolbox: s(3, 10), startBlocks: u(3, 10) }, "4_1": { answer: a(4, 1), ideal: 4, toolbox: s(4, 1), startBlocks: u(4, 1), requiredBlocks: [[k], [d(3)], [{ test: function (e) { return "draw_turn_by_constant" == e.type }, type: "draw_turn_by_constant", titles: { VALUE: "???" } }]] }, "4_2": { answer: a(4, 2), ideal: 12, toolbox: s(4, 2), startBlocks: u(4, 2), requiredBlocks: [[y("???")]], sliderSpeed: .5 }, "4_3": { answer: a(4, 3), ideal: 8, toolbox: s(4, 3), startBlocks: u(4, 3), requiredBlocks: [[d(4)], [y("???")]], sliderSpeed: .7 }, "4_4": { answer: a(4, 4), ideal: 8, toolbox: s(4, 4), startBlocks: u(4, 4), requiredBlocks: [[d("???")]], sliderSpeed: .7, impressive: !0 }, "4_5": { answer: a(4, 5), ideal: 8, toolbox: s(4, 5), startBlocks: u(4, 5), requiredBlocks: [[y("???")]], sliderSpeed: .9, impressive: !0 }, "4_6": { answer: a(4, 6), ideal: 4, toolbox: s(4, 6), startBlocks: u(4, 6), requiredBlocks: [[v(20)], [d(4)], [{ test: "turnRight", type: "draw_turn_by_constant", titles: { VALUE: "???" } }]], permittedErrors: 10, startDirection: 0 }, "4_7": { answer: a(4, 7), initialY: 300, ideal: 8, toolbox: s(4, 7), startBlocks: u(4, 7), requiredBlocks: [[v(20)], [d(10)]], startDirection: 0, sliderSpeed: .7 }, "4_8": { answer: a(4, 8), initialX: 100, initialY: 300, ideal: 10, toolbox: s(4, 8), startBlocks: u(4, 8), requiredBlocks: [[d(4)], [y("???")]], startDirection: 0, sliderSpeed: .9 }, "4_9": { answer: a(4, 9), initialX: 150, initialY: 350, ideal: 10, toolbox: s(4, 9), startBlocks: u(4, 9), requiredBlocks: [[y("???")]], startDirection: 330, sliderSpeed: .9 }, "4_10": { answer: a(4, 10), initialX: 75, initialY: 300, ideal: 10, toolbox: s(4, 10), startBlocks: u(4, 10), requiredBlocks: [[d("???")]], startDirection: 0, sliderSpeed: .9, impressive: !0 }, "4_11": { answer: a(4, 11), freePlay: !0, initialX: 75, initialY: 300, toolbox: s(4, 11), startBlocks: u(4, 11), requiredBlocks: [], startDirection: 0, sliderSpeed: .9 }, "5_1": { minWorkspaceHeight: 1200, answer: a(5, 1), freePlay: !0, toolbox: s(5, 1), startBlocks: u(5, 1), sliderSpeed: .9 }, "5_2": { minWorkspaceHeight: 1200, answer: a(5, 2), freePlay: !0, toolbox: s(5, 2), startBlocks: u(5, 2), sliderSpeed: 1 }, "5_3": { minWorkspaceHeight: 1200, answer: a(5, 3), freePlay: !0, toolbox: s(5, 3), startBlocks: u(5, 3), sliderSpeed: 1 }, "5_4": { minWorkspaceHeight: 1600, answer: a(5, 4), freePlay: !0, toolbox: s(5, 4), startBlocks: u(5, 4), sliderSpeed: 1 }, "5_5": { minWorkspaceHeight: 1600, answer: a(5, 5), freePlay: !0, toolbox: s(5, 5), startBlocks: u(5, 5), sliderSpeed: 1 }, "5_6": { minWorkspaceHeight: 1600, answer: a(5, 6), freePlay: !0, initialY: 300, toolbox: s(5, 6), startBlocks: u(5, 6), startDirection: 0, sliderSpeed: 1 }, builder: { answer: [], freePlay: !0, initialY: 300, toolbox: s(5, r), startBlocks: "", startDirection: 0, sliderSpeed: 1 }, custom: { answer: [], freePlay: !1, initialY: 300, toolbox: s(5, r), startBlocks: "", startDirection: 0, sliderSpeed: 1 }, k1_demo: { answer: [], freePlay: !1, initialY: 300, isK1: !0, toolbox: i.createToolbox(S.simpleMoveBlocks() + S.simpleJumpBlocks() + S.simpleMoveLengthBlocks() + i.blockOfType("controls_repeat_simplified") + i.blockOfType("draw_colour_simple")), startBlocks: "", startDirection: 0, sliderSpeed: 1 } }; L.ec_1_1 = o.extend(L["1_1"], { editCode: !0, codeFunctions: { moveForward: null, turnRight: null }, startBlocks: "moveForward(100);\n" }), L.ec_1_2 = o.extend(L["1_2"], { editCode: !0, codeFunctions: { moveForward: null, turnRight: null, penColour: null }, startBlocks: "penColour('#ff0000');\nmoveForward(100);\n" }), L.ec_1_3 = o.extend(L["1_3"], { editCode: !0, codeFunctions: { moveForward: null, turnRight: null, penColour: null, forLoop_i_0_4: { category: "Artist" } }, startBlocks: "for (var i = 0; i < 4; i++) {\n  __\n}\n" }), L.ec_1_4 = o.extend(L["1_4"], { editCode: !0, codeFunctions: { moveForward: null, turnRight: null, penColour: null, forLoop_i_0_4: { category: "Artist" } }, startBlocks: "for (var i = 0; i < 3; i++) {\n  penColour('#ff0000');\n}\n" }), L.ec_1_10 = o.extend(L["1_10"], { editCode: !0, codeFunctions: { moveForward: null, turnRight: null, penColour: null, penWidth: null, forLoop_i_0_4: { category: "Artist" } }, startBlocks: "moveForward(100);\n" }) }, { "../block_utils": "/home/ubuntu/staging/apps/build/js/block_utils.js", "../level_base": "/home/ubuntu/staging/apps/build/js/level_base.js", "../utils": "/home/ubuntu/staging/apps/build/js/utils.js", "./answers": "/home/ubuntu/staging/apps/build/js/turtle/answers.js", "./colours": "/home/ubuntu/staging/apps/build/js/turtle/colours.js", "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js", "./requiredBlocks": "/home/ubuntu/staging/apps/build/js/turtle/requiredBlocks.js", "./startBlocks.xml.ejs": "/home/ubuntu/staging/apps/build/js/turtle/startBlocks.xml.ejs", "./toolbox.xml.ejs": "/home/ubuntu/staging/apps/build/js/turtle/toolbox.xml.ejs" }], "/home/ubuntu/staging/apps/build/js/turtle/toolbox.xml.ejs": [function (require, module, exports) {
        module.exports = function () {
            var t = function anonymous(locals, filters, escape) {
                escape = escape || function (e) { return String(e).replace(/&(?!\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") }; var buf = []; with (locals || {}) !function () {
                    buf.push(""); var e = require("./locale"), t = 7; buf.push('<xml id="toolbox" style="display: none;">\n  '), 1 == page ? (buf.push('    <block type="draw_move_by_constant"></block>\n    <block type="draw_turn_by_constant'), 8 >= level && buf.push("_restricted"), buf.push('">\n      <title name="VALUE">90</title>\n    </block>\n    '), level >= 2 && buf.push('      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_picker"></block>\n        </value>\n      </block>\n    '), buf.push("    "), level >= 4 && buf.push('      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_random"></block>\n        </value>\n      </block>\n    '), buf.push("    "), level >= 3 && buf.push('      <block type="controls_repeat">\n        <title name="TIMES">4</title>\n      </block>\n    '), buf.push("    "), 10 == level && buf.push('      <block id="draw-width" type="draw_width_inline" x="158" y="67">\n        <title name="WIDTH">1</title>\n      </block>\n    '), buf.push("  ")) : 2 == page || 3 == page ? (buf.push("    "), buf.push('    <category id="actions" name="', escape(e.catTurtle()), '">\n      <block type="draw_move">\n        <value name="VALUE">\n          <block type="math_number">\n            <title name="NUM">100</title>\n          </block>\n        </value>\n      </block>\n      '), 2 == page && level >= 8 && buf.push('        <block type="jump">\n          <value name="VALUE">\n            <block type="math_number">\n              <title name="NUM">50</title>\n            </block>\n          </value>\n        </block>\n      '), buf.push('      <block type="draw_turn">\n        <value name="VALUE">\n          <block type="math_number">\n            <title name="NUM">90</title>\n          </block>\n        </value>\n      </block>\n      '), 10 == level && buf.push('        <block id="draw-width" type="draw_width_inline">\n          <title name="WIDTH">1</title>\n        </block>\n      '), buf.push("    </category>\n    "), buf.push('    <category name="', escape(e.catColour()), '">\n      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_picker"></block>\n        </value>\n      </block>\n      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_random"></block>\n        </value>\n      </block>\n    </category>\n    '), buf.push("    "), 2 == page && level >= 2 ? (buf.push('      <category name="', escape(e.catProcedures()), '">\n        <block type="draw_a_square" inline="true">\n          <value name="VALUE">\n            <block type="math_number">\n              <title name="NUM">100</title>\n            </block>\n          </value>\n        </block>\n        '), level >= 8 && buf.push('          <block type="draw_a_snowman" inline="true">\n            <value name="VALUE">\n              <block type="math_number">\n                <title name="NUM">100</title>\n              </block>\n            </value>\n          </block>\n        '), buf.push("      </category>\n    ")) : 3 == page && (buf.push("      "), 1 == level ? (buf.push("        "), buf.push('        <category name="', escape(e.catProcedures()), '">\n          <block type="procedures_callnoreturn">\n            <mutation name="', escape(e.drawACircle()), '"></mutation>\n          </block>\n          <block type="procedures_callnoreturn">\n            <mutation name="', escape(e.drawASquare()), '"></mutation>\n          </block>\n        </category>\n      ')) : buf.push('\n        <category name="', escape(e.catProcedures()), '" custom="PROCEDURE"></category>\n      '), buf.push("    ")), buf.push("    "), buf.push('    <category name="', escape(e.catControl()), '">\n      '), (2 == page && level >= 6 || 3 == page && level >= 9) && buf.push('        <block type="controls_for_counter">\n          <value name="FROM">\n            <block type="math_number">\n              <title name="NUM">1</title>\n            </block>\n          </value>\n          <value name="TO">\n            <block type="math_number">\n              <title name="NUM">100</title>\n            </block>\n          </value>\n          <value name="BY">\n            <block type="math_number">\n              <title name="NUM">10</title>\n            </block>\n          </value>\n        </block>\n      '), buf.push('      <block type="controls_repeat">\n        <title name="TIMES">4</title>\n      </block>\n    </category>\n    '), buf.push('    <category name="', escape(e.catMath()), '">\n      <block type="math_number"></block>\n      '), 10 == level && buf.push('        <block type="math_arithmetic" inline="true"></block>\n        <block type="math_random_int">\n          <value name="FROM">\n            <block type="math_number">\n              <title name="NUM">1</title>\n            </block>\n          </value>\n          <value name="TO">\n            <block type="math_number">\n              <title name="NUM">100</title>\n            </block>\n        </value>\n      </block>\n      <block type="math_random_float"></block>\n    '), buf.push("    </category>\n    "), buf.push("    "), buf.push("    "), 2 == page && level >= 6 ? buf.push('      <category name="', escape(e.catVariables()), '">\n        <block type="variables_get_counter"></block>\n      </category>\n    ') : 3 == page && level >= 6 && 10 > level ? (buf.push('      <category name="', escape(e.catVariables()), '">\n        '), level >= 9 && buf.push('          <block type="variables_get_counter"></block>\n        '), buf.push("        "), level >= 6 && buf.push('          <block type="variables_get_length"></block>\n        '), buf.push("      </category>\n    ")) : 3 == page && 10 == level && buf.push('      <category name="', escape(e.catVariables()), '" custom="VARIABLE">\n      </category>\n    '), buf.push("  ")) : 4 == page ? (buf.push("    "), buf.push('    <block type="draw_move_by_constant"></block>\n    <block type="draw_turn_by_constant">\n      <title name="VALUE">90</title>\n    </block>\n    '), 11 == level && buf.push('    <block id="draw-width" type="draw_width_inline">\n      <title name="WIDTH">1</title>\n    </block>\n    '), buf.push("    "), buf.push('    <block id="draw-color" type="draw_colour">\n      <value name="COLOUR">\n        <block type="colour_picker"></block>\n      </value>\n    </block>\n    <block id="draw-color" type="draw_colour">\n      <value name="COLOUR">\n        <block type="colour_random"></block>\n      </value>\n    </block>\n    <block type="controls_repeat">\n      <title name="TIMES">4</title>\n    </block>\n  ')) : 5 == page && (buf.push("  "), buf.push("    "), level === t && buf.push('      <category name="K1 Simplified">\n        <block type="controls_repeat_simplified">\n          <title name="TIMES">5</title>\n        </block>\n        <block type="draw_colour_simple"></block>\n        <block type="simple_move_up"></block>\n        <block type="simple_move_down"></block>\n        <block type="simple_move_left"></block>\n        <block type="simple_move_right"></block>\n        <block type="simple_move_up_length"></block>\n        <block type="simple_move_down_length"></block>\n        <block type="simple_move_left_length"></block>\n        <block type="simple_move_right_length"></block>\n        <block type="simple_jump_up"></block>\n        <block type="simple_jump_down"></block>\n        <block type="simple_jump_left"></block>\n        <block type="simple_jump_right"></block>\n      </category>\n    '), buf.push("    "), buf.push('    <category id="actions" name="', escape(e.catTurtle()), '">\n      <block type="draw_move">\n        <value name="VALUE">\n          <block type="math_number">\n            <title name="NUM">100</title>\n          </block>\n        </value>\n      </block>\n      <block type="jump">\n        <value name="VALUE">\n          <block type="math_number">\n            <title name="NUM">50</title>\n          </block>\n        </value>\n      </block>\n      <block type="draw_turn">\n        <value name="VALUE">\n          <block type="math_number">\n            <title name="NUM">90</title>\n          </block>\n        </value>\n      </block>\n      <block type="draw_pen"></block>\n      <block id="draw-width" type="draw_width_inline">\n        <title name="WIDTH">1</title>\n      </block>\n    </category>\n    '), buf.push('    <category name="', escape(e.catColour()), '">\n      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_picker"></block>\n        </value>\n      </block>\n      <block id="draw-color" type="draw_colour">\n        <value name="COLOUR">\n          <block type="colour_random"></block>\n        </value>\n      </block>\n    </category>\n    '), buf.push('    <category name="', escape(e.catProcedures()), '" custom="PROCEDURE"></category>\n    '), level === t && buf.push('    <category name="Prebuilt">\n      <block type="draw_a_triangle"></block>\n      <block type="draw_a_square_custom"></block>\n      <block type="draw_a_house"></block>\n      <block type="draw_a_flower"></block>\n      <block type="draw_a_snowflake"></block>\n      <block type="draw_a_snowman"></block>\n      <block type="draw_a_hexagon"></block>\n      <block type="draw_a_star"></block>\n      <block type="draw_a_robot"></block>\n      <block type="draw_a_rocket"></block>\n      <block type="draw_a_planet"></block>\n      <block type="draw_a_rhombus"></block>\n      <block type="draw_upper_wave"></block>\n      <block type="draw_lower_wave"></block>\n    </category>\n    '), buf.push("    "), buf.push('    <category name="', escape(e.catControl()), '">\n      <block type="controls_for_counter">\n        <value name="FROM">\n          <block type="math_number">\n            <title name="NUM">1</title>\n          </block>\n        </value>\n        <value name="TO">\n          <block type="math_number">\n            <title name="NUM">100</title>\n          </block>\n        </value>\n        <value name="BY">\n          <block type="math_number">\n            <title name="NUM">10</title>\n          </block>\n        </value>\n      </block>\n      '), buf.push(6 > level ? '        <block type="controls_repeat">\n          <title name="TIMES">4</title>\n        </block>\n      ' : '        <block type="controls_repeat_ext">\n          <value name="TIMES">\n            <block type="math_number">\n              <title name="NUM">10</title>\n            </block>\n          </value>\n        </block>\n      '), buf.push("    </category>\n  "), buf.push('    <category name="', escape(e.catLogic()), '">\n      <block type="controls_if"></block>\n      <block type="logic_compare"></block>\n      <block type="logic_operation"></block>\n      <block type="logic_negate"></block>\n      <block type="logic_boolean"></block>\n      <block type="logic_null"></block>\n      <block type="logic_ternary"></block>\n    </category>\n    '), buf.push('    <category name="', escape(e.catMath()), '">\n      <block type="math_number"></block>\n      <block type="math_arithmetic" inline="true"></block>\n      <block type="math_random_int">\n        <value name="FROM">\n          <block type="math_number">\n            <title name="NUM">1</title>\n          </block>\n        </value>\n        <value name="TO">\n          <block type="math_number">\n            <title name="NUM">100</title>\n          </block>\n        </value>\n      </block>\n      <block type="math_random_float"></block>\n     </category>\n    '), buf.push('    <category name="', escape(e.catVariables()), '" custom="VARIABLE">\n    </category>\n  ')), buf.push("</xml>\n")
                }(); return buf.join("")
            }; return function (e) { return t(e, require("ejs").filters) }
        }()
    }, { "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js", ejs: "/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js" }], "/home/ubuntu/staging/apps/build/js/turtle/startBlocks.xml.ejs": [function (require, module, exports) {
        module.exports = function () {
            var t = function anonymous(locals, filters, escape) {
                escape = escape || function (e) { return String(e).replace(/&(?!\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") }; var buf = []; with (locals || {}) !function () {
                    buf.push(""); var e = require("./locale"), t = function (t) { buf.push('<block type="procedures_defnoreturn" ', t.modifiers, ">\n    <mutation>\n      "), 0 == t.length && buf.push('        <arg name="', escape(e.lengthParameter()), '"></arg>\n      '), buf.push('    </mutation>\n    <title name="NAME">', escape(t.title), '</title>\n    <statement name="STACK">\n      <block type="controls_repeat" ', t.modifiers, '>\n        <title name="TIMES">', escape(t.sides), '</title>\n        <statement name="DO">\n          <block type="draw_move" ', t.modifiers, '>\n            <value name="VALUE">\n              '), 0 == t.length ? buf.push('                <block type="variables_get_length" ', t.modifiers, "></block>\n              ") : buf.push('                <block type="math_number" ', t.modifiers, '>\n                  <title name="NUM">', escape(t.length), "</title>\n                </block>\n              "), buf.push('            </value>\n            <next>\n              <block type="draw_turn" ', t.modifiers, '>\n                <value name="VALUE">\n                  <block type="math_number" ', t.modifiers, '>\n                    <title name="NUM">', escape(360 / t.sides), "</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n") }; buf.push("\n"); var n = function (e) { buf.push("  "), 60 >= e && (buf.push('    <block type="draw_move" '), 25 == e && buf.push('x="300" y="100"'), buf.push(' inline="false" editable="false" deletable="false" disabled="true">\n      <title name="DIR">moveForward</title>\n      <value name="VALUE">\n        <block type="math_number" editable="false" deletable="false" disabled="true">\n          <title name="NUM">', escape(e), '</title>\n        </block>\n      </value>\n      <next>\n        <block type="draw_turn" inline="false" editable="false" deletable="false" disabled="true">\n          <title name="DIR">turnRight</title>\n          <value name="VALUE">\n            <block type="math_number" editable="false" deletable="false" disabled="true">\n              <title name="NUM">90</title>\n            </block>\n          </value>\n          <next>\n            '), n(e + 5), buf.push("          </next>\n        </block>\n      </next>\n    </block>\n  ")), buf.push("\n") }; buf.push("\n"), buf.push("\n"), 1 == page ? (buf.push("  "), 1 == level ? buf.push('    <block type="draw_move_by_constant" x="20" y="20"></block>\n  ') : 2 == level ? buf.push('    <block type="draw_colour" inline="true" x="20" y="20">\n      <value name="COLOUR">\n        <block type="colour_picker">\n          <title name="COLOUR">#ff0000</title>\n        </block>\n      </value>\n      <next>\n        <block type="draw_move_by_constant"></block>\n      </next>\n    </block>\n  ') : 4 == level ? buf.push('    <block type="controls_repeat" x="20" y="20">\n      <title name="TIMES">3</title>\n      <statement name="DO">\n        <block type="draw_colour" inline="true">\n          <value name="COLOUR">\n            <block type="colour_random"></block>\n          </value>\n        </block>\n      </statement>\n    </block>\n  ') : 3 == level || 5 == level || 6 == level ? (buf.push('    <block type="controls_repeat" x="20" y="20">\n      <title name="TIMES">'), buf.push(3 == level ? "4" : "3"), buf.push("</title>\n    </block>\n  ")) : 7 == level ? buf.push('    <block type="draw_turn_by_constant_restricted" x="20" y="20">\n      <title name="DIR">turnRight</title>\n      <title name="VALUE">90</title>\n    </block>\n  ') : 8 == level ? buf.push('    <block id="set-color" type="draw_colour" x="20" y="100">\n      <value name="COLOUR">\n        <block type="colour_random"></block>\n      </value>\n      <next>\n        <block type="draw_move_by_constant">\n          <title name="DIR">moveForward</title>\n          <title name="VALUE">100</title>\n          <next>\n            <block type="draw_move_by_constant">\n              <title name="DIR">moveBackward</title>\n              <title name="VALUE">100</title>\n              <next>\n                <block type="draw_turn_by_constant">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">45</title>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </next>\n    </block>\n  ') : 9 == level ? buf.push('    <block type="controls_repeat" deletable="false"  x="20" y="20">\n      <title name="TIMES">??</title>\n      <statement name="DO">\n        <block type="draw_move" editable="false" deletable="false">\n          <value name="VALUE">\n            <block type="math_number" editable="false" deletable="false">\n              <title name="NUM">1</title>\n            </block>\n          </value>\n          <next>\n            <block type="draw_turn" editable="false" deletable="false">\n              <value name="VALUE">\n                <block type="math_number" editable="false" deletable="false">\n                  <title name="NUM">1</title>\n                </block>\n              </value>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 10 == level && buf.push('    <block type="draw_move_by_constant" x="20" y="20">\n      <title name="DIR">moveForward</title>\n      <title name="VALUE">100</title>\n    </block>\n  '), buf.push("")) : 2 == page ? (buf.push("  "), buf.push("  "), 3 == level || 5 == level ? (buf.push("    "), buf.push('    <block type="draw_a_square" inline="true" x="20" y="20">\n      <value name="VALUE">\n        <block type="math_number">\n          <title name="NUM">'), buf.push(3 == level ? "100" : "50"), buf.push("</title>\n        </block>\n      </value>\n    </block>\n  ")) : 4 == level ? (buf.push("    "), buf.push('    <block type="controls_repeat" deletable="false"  x="20" y="20">\n      <title name="TIMES">???</title>\n      <statement name="DO">\n        <block id="set-color" type="draw_colour" deletable="false">\n          <value name="COLOUR">\n            <block type="colour_random" deletable="false">\n            </block>\n          </value>\n          <next>\n            <block type="draw_a_square" inline="true" editable="false" deletable="false">\n              <value name="VALUE">\n                <block type="math_number" deletable="false">\n                  <title name="NUM">???</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" editable="false" deletable="false">\n                  <value name="VALUE">\n                    <block type="math_number" deletable="false">\n                      <title name="NUM">???</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ')) : 6 == level ? (buf.push('    <block type="controls_for_counter" inline="true" x="20" y="20">\n    <title name="VAR">', escape(e.loopVariable()), '</title>\n      <value name="FROM">\n        <block type="math_number">\n          <title name="NUM">'), buf.push(6 == level ? "50" : "10"), buf.push('</title>\n        </block>\n      </value>\n      <value name="TO">\n        <block type="math_number">\n          <title name="NUM">'), buf.push(6 == level ? "90" : "100"), buf.push('</title>\n        </block>\n      </value>\n      <value name="BY">\n        <block type="math_number">\n          <title name="NUM">10</title>\n        </block>\n      </value>\n      <statement name="DO">\n        <block type="draw_a_square" inline="true">\n        </block>\n      </statement>\n    </block>\n  ')) : 7 == level ? (buf.push("    "), n(25), buf.push("  ")) : 7.5 == level ? buf.push('    <block type="draw_a_snowman" x="20" y="20" inline="true">\n      <value name="VALUE">\n        <block type="math_number">\n          <title name="NUM">250</title>\n        </block>\n      </value>\n    </block>\n  ') : 8 == level || 9 == level ? buf.push('    <block type="draw_a_snowman" x="20" y="20" inline="true">\n      <value name="VALUE">\n        <block type="math_number">\n          <title name="NUM">150</title>\n        </block>\n      </value>\n    </block>\n  ') : 10 == level && buf.push('    <block id="draw-width" type="draw_width_inline" x="158" y="67">\n      <title name="WIDTH">1</title>\n      <next>\n        <block type="controls_for_counter" inline="true">\n          <value name="FROM">\n            <block type="math_number">\n              <title name="NUM">1</title>\n            </block>\n          </value>\n          <value name="TO">\n            <block type="math_number">\n              <title name="NUM">100</title>\n            </block>\n          </value>\n          <value name="BY">\n            <block type="math_number">\n              <title name="NUM">1</title>\n            </block>\n          </value>\n          <statement name="DO">\n            <block type="draw_move" inline="false">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get_counter"></block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="false">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">91</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </next>\n    </block>\n  '), buf.push("")) : 3 == page ? (buf.push("  "), buf.push("  ", t({ title: e.drawASquare(), modifiers: (8 == level ? "" : 'x="220" y="40"') + ' editable="false" deletable="false"', sides: 4, length: level >= 6 ? 0 : 100 }), "  "), 1 == level && (buf.push("    "), buf.push("    ", t({ title: e.drawACircle(), modifiers: 'x="220" y="250" editable="false" deletable="false"', sides: 360, length: 1 }), "  ")), buf.push("  "), 2 == level ? buf.push('    <block type="procedures_defnoreturn" x="220" y="250">\n      <title name="NAME">', escape(e.drawATriangle()), "</title>\n    </block>\n  ") : level >= 3 && (buf.push("    "), buf.push("    ", t({ title: e.drawATriangle(), modifiers: (8 == level ? "" : 'x="220" y="250"') + (6 == level ? "" : ' editable="false" deletable="false"'), sides: 3, length: level >= 7 ? 0 : 100 }), "  ")), buf.push("  "), 8 == level && buf.push('    <block type="procedures_callnoreturn" inline="false">\n      <mutation name="', escape(e.drawAHouse()), '">\n        <arg name="', escape(e.lengthParameter()), '"></arg>\n      </mutation>\n        <value name="ARG0">\n          <block type="math_number">\n            <title name="NUM">100</title>\n          </block>\n        </value>\n    </block>\n  '), buf.push("  "), (7 == level || 8 == level) && (buf.push("    "), buf.push('    <block type="procedures_defnoreturn" '), 7 == level && buf.push('x="220" y="460"'), buf.push(">      <mutation>\n        "), 8 == level && buf.push('<arg name="', escape(e.lengthParameter()), '"></arg>'), buf.push('      </mutation>\n      <title name="NAME">', escape(e.drawAHouse()), '</title>\n      <statement name="STACK">\n        <block type="procedures_callnoreturn" inline="false">\n          <mutation name="', escape(e.drawASquare()), '">\n            <arg name="', escape(e.lengthParameter()), '"/>\n          </mutation>\n          <value name="ARG0">\n            '), 8 == level ? buf.push('              <block type="variables_get">\n                <title name="VAR">', escape(e.lengthParameter()), "</title>\n              </block>\n            ") : buf.push('              <block type="math_number">\n                <title name="NUM">100</title>\n              </block>\n            '), buf.push('          </value>\n          <next>\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                '), 8 == level ? buf.push('                  <block type="variables_get">\n                    <title name="VAR">', escape(e.lengthParameter()), "</title>\n                  </block>\n                ") : buf.push('                  <block type="math_number">\n                    <title name="NUM">100</title>\n                  </block>\n                '), buf.push('              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">30</title>\n                    </block>\n                  </value>\n                  <next>\n                    <block type="procedures_callnoreturn" inline="false">\n                      <mutation name="', escape(e.drawATriangle()), '">\n                        <arg name="', escape(e.lengthParameter()), '"></arg>\n                      </mutation>\n                      <value name="ARG0">\n                        '), 8 == level ? buf.push('                          <block type="variables_get">\n                            <title name="VAR">', escape(e.lengthParameter()), "</title>\n                          </block>\n                        ") : buf.push('                          <block type="math_number">\n                            <title name="NUM">100</title>\n                          </block>\n                        '), buf.push("                      </value>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ")), buf.push("")) : 4 == page ? (buf.push("  "), 2 == level ? buf.push('    <block type="draw_colour" inline="true" x="70" y="70" editable="false" deletable="false" movable="true">\n      <value name="COLOUR">\n        <block type="colour_random" editable="false" deletable="false" movable="true"></block>\n      </value>\n      <next>\n        <block type="controls_repeat" editable="false" deletable="false" movable="true">\n          <title name="TIMES">3</title>\n          <statement name="DO">\n            <block type="draw_move_by_constant" editable="false" deletable="false" movable="true">\n              <title name="DIR">moveForward</title>\n              <title name="VALUE">100</title>\n              <next>\n                <block type="draw_turn_by_constant" editable="false" deletable="false" movable="true">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">120</title>\n                </block>\n              </next>\n            </block>\n          </statement>\n          <next>\n            <block type="draw_colour" inline="true" x="70" y="230" editable="false" deletable="false" movable="true">\n              <value name="COLOUR">\n                <block type="colour_random" editable="false" deletable="false" movable="true"></block>\n              </value>\n              <next>\n                <block type="controls_repeat" editable="false" deletable="false" movable="true">\n                  <title name="TIMES">3</title>\n                  <statement name="DO">\n                    <block type="draw_move_by_constant" editable="false" deletable="false" movable="true">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">100</title>\n                      <next>\n                        <block type="draw_turn_by_constant" editable="false" deletable="false" movable="true">\n                          <title name="DIR">turnRight</title>\n                          <title name="VALUE">120</title>\n                        </block>\n                      </next>\n                    </block>\n                  </statement>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </next>\n    </block>\n  ') : 3 == level ? buf.push('    <block type="draw_colour" inline="true" x="70" y="70" editable="false" deletable="false">\n      <value name="COLOUR">\n        <block type="colour_random" editable="false" deletable="false"></block>\n      </value>\n      <next>\n        <block type="controls_repeat" editable="false" deletable="false">\n          <title name="TIMES">3</title>\n          <statement name="DO">\n            <block type="draw_move_by_constant" editable="false" deletable="false">\n              <title name="DIR">moveForward</title>\n              <title name="VALUE">100</title>\n              <next>\n                <block type="draw_turn_by_constant" editable="false" deletable="false">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">120</title>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </next>\n    </block>\n  ') : 4 == level ? buf.push('    <block type="controls_repeat" x="70" y="70">\n      <title name="TIMES">???</title>\n      <statement name="DO">\n        <block type="draw_colour" inline="true" editable="false" deletable="false">\n          <value name="COLOUR">\n            <block type="colour_random" editable="false" deletable="false"></block>\n          </value>\n          <next>\n            <block type="controls_repeat" editable="false" deletable="false">\n              <title name="TIMES">3</title>\n              <statement name="DO">\n                <block type="draw_move_by_constant" editable="false" deletable="false">\n                  <title name="DIR">moveForward</title>\n                  <title name="VALUE">100</title>\n                  <next>\n                    <block type="draw_turn_by_constant" editable="false" deletable="false">\n                      <title name="DIR">turnRight</title>\n                      <title name="VALUE">120</title>\n                    </block>\n                  </next>\n                </block>\n              </statement>\n              <next>\n                <block type="draw_turn_by_constant" editable="false" deletable="false">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">36</title>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 5 == level ? buf.push('    <block type="controls_repeat" x="70" y="70" editable="false" deletable="false">\n      <title name="TIMES">36</title>\n      <statement name="DO">\n        <block type="draw_colour" inline="true" editable="false" deletable="false">\n          <value name="COLOUR">\n            <block type="colour_random" editable="false" deletable="false"></block>\n          </value>\n          <next>\n            <block type="controls_repeat" editable="false" deletable="false">\n              <title name="TIMES">3</title>\n              <statement name="DO">\n                <block type="draw_move_by_constant" editable="false" deletable="false">\n                  <title name="DIR">moveForward</title>\n                  <title name="VALUE">100</title>\n                  <next>\n                    <block type="draw_turn_by_constant" editable="false" deletable="false">\n                      <title name="DIR">turnRight</title>\n                      <title name="VALUE">120</title>\n                    </block>\n                  </next>\n                </block>\n              </statement>\n              <next>\n                <block type="draw_turn_by_constant">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">???</title>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 7 == level ? buf.push('    <block type="draw_colour" inline="true" x="70" y="70" editable="false" deletable="false">\n      <value name="COLOUR">\n        <block type="colour_random" editable="false" deletable="false"></block>\n      </value>\n      <next>\n        <block type="controls_repeat" editable="false" deletable="false">\n          <title name="TIMES">4</title>\n          <statement name="DO">\n            <block type="draw_move_by_constant" editable="false" deletable="false">\n              <title name="DIR">moveForward</title>\n              <title name="VALUE">20</title>\n              <next>\n                <block type="draw_turn_by_constant" editable="false" deletable="false">\n                  <title name="DIR">turnRight</title>\n                  <title name="VALUE">90</title>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </next>\n    </block>\n  ') : 8 == level ? buf.push('    <block type="controls_repeat" x="70" y="70" editable="false" deletable="false">\n      <title name="TIMES">10</title>\n      <statement name="DO">\n        <block type="draw_colour" inline="true" editable="false" deletable="false">\n          <value name="COLOUR">\n            <block type="colour_random" editable="false" deletable="false"></block>\n          </value>\n          <next>\n            <block type="controls_repeat" editable="false" deletable="false">\n              <title name="TIMES">4</title>\n              <statement name="DO">\n                <block type="draw_move_by_constant" editable="false" deletable="false">\n                  <title name="DIR">moveForward</title>\n                  <title name="VALUE">20</title>\n                  <next>\n                    <block type="draw_turn_by_constant" editable="false" deletable="false">\n                      <title name="DIR">turnRight</title>\n                      <title name="VALUE">90</title>\n                    </block>\n                  </next>\n                </block>\n              </statement>\n              <next>\n                <block type="draw_move_by_constant" editable="false" deletable="false">\n                  <title name="DIR">moveForward</title>\n                  <title name="VALUE">20</title>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 9 == level ? buf.push('    <block type="controls_repeat" x="70" y="70" editable="false" deletable="false">\n      <title name="TIMES">4</title>\n      <statement name="DO">\n        <block type="controls_repeat" editable="false" deletable="false">\n          <title name="TIMES">10</title>\n          <statement name="DO">\n            <block type="draw_colour" inline="true" editable="false" deletable="false">\n              <value name="COLOUR">\n                <block type="colour_random" editable="false" deletable="false"></block>\n              </value>\n              <next>\n                <block type="controls_repeat" editable="false" deletable="false">\n                  <title name="TIMES">4</title>\n                  <statement name="DO">\n                    <block type="draw_move_by_constant" editable="false" deletable="false">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                      <next>\n                        <block type="draw_turn_by_constant" editable="false" deletable="false">\n                          <title name="DIR">turnRight</title>\n                          <title name="VALUE">90</title>\n                        </block>\n                      </next>\n                    </block>\n                  </statement>\n                  <next>\n                    <block type="draw_move_by_constant" editable="false" deletable="false">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </statement>\n          <next>\n            <block type="draw_turn_by_constant">\n              <title name="DIR">turnRight</title>\n              <title name="VALUE">???</title>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 10 == level ? buf.push('    <block type="controls_repeat" x="70" y="70">\n      <title name="TIMES">???</title>\n      <statement name="DO">\n        <block type="controls_repeat" editable="false" deletable="false">\n          <title name="TIMES">10</title>\n          <statement name="DO">\n            <block type="draw_colour" inline="true" editable="false" deletable="false">\n              <value name="COLOUR">\n                <block type="colour_random" editable="false" deletable="false"></block>\n              </value>\n              <next>\n                <block type="controls_repeat" editable="false" deletable="false">\n                  <title name="TIMES">4</title>\n                  <statement name="DO">\n                    <block type="draw_move_by_constant" editable="false" deletable="false">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                      <next>\n                        <block type="draw_turn_by_constant" editable="false" deletable="false">\n                          <title name="DIR">turnRight</title>\n                          <title name="VALUE">90</title>\n                        </block>\n                      </next>\n                    </block>\n                  </statement>\n                  <next>\n                    <block type="draw_move_by_constant" editable="false" deletable="false">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </statement>\n          <next>\n            <block type="draw_turn_by_constant" editable="false" deletable="false">\n              <title name="DIR">turnRight</title>\n              <title name="VALUE">80</title>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 11 == level && buf.push('    <block type="controls_repeat" x="70" y="70">\n      <title name="TIMES">???</title>\n      <statement name="DO">\n        <block type="controls_repeat">\n          <title name="TIMES">10</title>\n          <statement name="DO">\n            <block type="draw_colour" inline="true">\n              <value name="COLOUR">\n                <block type="colour_random"></block>\n              </value>\n              <next>\n                <block type="controls_repeat">\n                  <title name="TIMES">4</title>\n                  <statement name="DO">\n                    <block type="draw_move_by_constant">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                      <next>\n                        <block type="draw_turn_by_constant">\n                          <title name="DIR">turnRight</title>\n                          <title name="VALUE">90</title>\n                        </block>\n                      </next>\n                    </block>\n                  </statement>\n                  <next>\n                    <block type="draw_move_by_constant">\n                      <title name="DIR">moveForward</title>\n                      <title name="VALUE">20</title>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </statement>\n          <next>\n            <block type="draw_turn_by_constant">\n              <title name="DIR">turnRight</title>\n              <title name="VALUE">???</title>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  '), buf.push("")) : 5 == page && (buf.push("  "), 1 == level ? buf.push('    <block type="controls_for_counter" inline="true" x="70" y="70">\n      <value name="FROM">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <value name="TO">\n        <block type="math_number">\n          <title name="NUM">200</title>\n        </block>\n      </value>\n      <value name="BY">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <statement name="DO">\n        <block type="draw_colour" inline="true">\n          <value name="COLOUR">\n            <block type="colour_random"></block>\n          </value>\n          <next>\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.loopVariable()), '</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">90</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 2 == level ? buf.push('    <block type="controls_for_counter" inline="true" x="70" y="70">\n      <value name="FROM">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <value name="TO">\n        <block type="math_number">\n          <title name="NUM">300</title>\n        </block>\n      </value>\n      <value name="BY">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <statement name="DO">\n        <block type="draw_colour" inline="true">\n          <value name="COLOUR">\n            <block type="colour_random"></block>\n          </value>\n          <next>\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.loopVariable()), '</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">121</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 3 == level ? buf.push('    <block type="controls_for_counter" inline="true" x="70" y="70">\n      <value name="FROM">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <value name="TO">\n        <block type="math_number">\n          <title name="NUM">300</title>\n        </block>\n      </value>\n      <value name="BY">\n        <block type="math_number">\n          <title name="NUM">1</title>\n        </block>\n      </value>\n      <statement name="DO">\n        <block type="draw_colour" inline="true">\n          <value name="COLOUR">\n            <block type="colour_random"></block>\n          </value>\n          <next>\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.loopVariable()), '</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">134</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n  ') : 4 == level ? buf.push('    <block type="controls_repeat" x="70" y="20">\n      <title name="TIMES">10</title>\n      <statement name="DO">\n        <block type="draw_colour" inline="true">\n          <value name="COLOUR">\n            <block type="colour_random"></block>\n          </value>\n          <next>\n            <block type="procedures_callnoreturn" inline="false">\n              <mutation name="', escape(e.drawACircle()), '">\n                <arg name="', escape(e.step()), '"></arg>\n              </mutation>\n              <value name="ARG0">\n                <block type="math_number">\n                  <title name="NUM">6</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">36</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </next>\n        </block>\n      </statement>\n    </block>\n    <block type="procedures_defnoreturn" x="70" y="270">\n      <mutation>\n        <arg name="', escape(e.step()), '"></arg>\n      </mutation>\n      <title name="NAME">', escape(e.drawACircle()), '</title>\n      <statement name="STACK">\n        <block type="controls_repeat">\n          <title name="TIMES">60</title>\n          <statement name="DO">\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.step()), '</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">6</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </statement>\n    </block>\n  ') : 5 == level ? buf.push('    <block type="controls_for_counter" inline="true" x="70" y="20">\n      <value name="FROM">\n        <block type="math_number">\n          <title name="NUM">4</title>\n        </block>\n      </value>\n      <value name="TO">\n        <block type="math_number">\n          <title name="NUM">8</title>\n        </block>\n      </value>\n      <value name="BY">\n        <block type="math_number">\n          <title name="NUM">4</title>\n        </block>\n      </value>\n      <statement name="DO">\n        <block type="controls_repeat">\n          <title name="TIMES">10</title>\n          <statement name="DO">\n            <block type="draw_colour" inline="true">\n              <value name="COLOUR">\n                <block type="colour_random"></block>\n              </value>\n              <next>\n                <block type="procedures_callnoreturn" inline="false">\n                  <mutation name="', escape(e.drawACircle()), '">\n                    <arg name="', escape(e.step()), '"></arg>\n                  </mutation>\n                  <value name="ARG0">\n                    <block type="variables_get">\n                      <title name="VAR">', escape(e.loopVariable()), '</title>\n                    </block>\n                  </value>\n                  <next>\n                    <block type="draw_turn" inline="true">\n                      <title name="DIR">turnRight</title>\n                      <value name="VALUE">\n                        <block type="math_number">\n                          <title name="NUM">36</title>\n                        </block>\n                      </value>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </statement>\n    </block>\n    <block type="procedures_defnoreturn" x="70" y="320">\n      <mutation>\n        <arg name="', escape(e.step()), '"></arg>\n      </mutation>\n      <title name="NAME">', escape(e.drawACircle()), '</title>\n      <statement name="STACK">\n        <block type="controls_repeat">\n          <title name="TIMES">60</title>\n          <statement name="DO">\n            <block type="draw_move" inline="true">\n              <title name="DIR">moveForward</title>\n              <value name="VALUE">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.step()), '</title>\n                </block>\n              </value>\n              <next>\n                <block type="draw_turn" inline="true">\n                  <title name="DIR">turnRight</title>\n                  <value name="VALUE">\n                    <block type="math_number">\n                      <title name="NUM">6</title>\n                    </block>\n                  </value>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </statement>\n    </block>\n  ') : 6 == level && buf.push('    <block type="procedures_callnoreturn" inline="false" x="70" y="20">\n      <mutation name="', escape(e.drawATree()), '">\n        <arg name="', escape(e.depth()), '"></arg>\n        <arg name="', escape(e.branches()), '"></arg>\n      </mutation>\n      <value name="ARG0">\n        <block type="math_number">\n          <title name="NUM">9</title>\n        </block>\n      </value>\n      <value name="ARG1">\n        <block type="math_number">\n          <title name="NUM">2</title>\n        </block>\n      </value>\n    </block>\n    <block type="procedures_defnoreturn" x="70" y="190">\n      <mutation>\n        <arg name="', escape(e.depth()), '"></arg>\n        <arg name="', escape(e.branches()), '"></arg>\n      </mutation>\n      <title name="NAME">', escape(e.drawATree()), '</title>\n      <statement name="STACK">\n        <block type="controls_if" inline="false">\n          <value name="IF0">\n            <block type="logic_compare" inline="true">\n              <title name="OP">GT</title>\n              <value name="A">\n                <block type="variables_get">\n                  <title name="VAR">', escape(e.depth()), '</title>\n                </block>\n              </value>\n              <value name="B">\n                <block type="math_number">\n                  <title name="NUM">0</title>\n                </block>\n              </value>\n            </block>\n          </value>\n          <statement name="DO0">\n            <block type="draw_colour" inline="true">\n              <value name="COLOUR">\n                <block type="colour_random"></block>\n              </value>\n              <next>\n                <block type="draw_pen">\n                  <title name="PEN">penDown</title>\n                  <next>\n                    <block type="draw_move" inline="true">\n                      <title name="DIR">moveForward</title>\n                      <value name="VALUE">\n                        <block type="math_arithmetic" inline="true">\n                          <title name="OP">MULTIPLY</title>\n                          <value name="A">\n                            <block type="math_number">\n                              <title name="NUM">7</title>\n                            </block>\n                          </value>\n                          <value name="B">\n                            <block type="variables_get">\n                              <title name="VAR">', escape(e.depth()), '</title>\n                            </block>\n                          </value>\n                        </block>\n                      </value>\n                      <next>\n                        <block type="draw_turn" inline="true">\n                          <title name="DIR">turnLeft</title>\n                          <value name="VALUE">\n                            <block type="math_number">\n                              <title name="NUM">130</title>\n                            </block>\n                          </value>\n                          <next>\n                            <block type="controls_repeat_ext" inline="true">\n                              <value name="TIMES">\n                                <block type="variables_get">\n                                  <title name="VAR">', escape(e.branches()), '</title>\n                                </block>\n                              </value>\n                              <statement name="DO">\n                                <block type="draw_turn" inline="true">\n                                  <title name="DIR">turnRight</title>\n                                  <value name="VALUE">\n                                    <block type="math_arithmetic" inline="true">\n                                      <title name="OP">DIVIDE</title>\n                                      <value name="A">\n                                        <block type="math_number">\n                                          <title name="NUM">180</title>\n                                        </block>\n                                      </value>\n                                      <value name="B">\n                                        <block type="variables_get">\n                                          <title name="VAR">', escape(e.branches()), '</title>\n                                        </block>\n                                      </value>\n                                    </block>\n                                  </value>\n                                  <next>\n                                    <block type="procedures_callnoreturn" inline="false">\n                                      <mutation name="', escape(e.drawATree()), '">\n                                        <arg name="', escape(e.depth()), '"></arg>\n                                        <arg name="', escape(e.branches()), '"></arg>\n                                      </mutation>\n                                      <value name="ARG0">\n                                        <block type="math_arithmetic" inline="true">\n                                          <title name="OP">MINUS</title>\n                                          <value name="A">\n                                            <block type="variables_get">\n                                              <title name="VAR">', escape(e.depth()), '</title>\n                                            </block>\n                                          </value>\n                                          <value name="B">\n                                            <block type="math_number">\n                                              <title name="NUM">1</title>\n                                            </block>\n                                          </value>\n                                        </block>\n                                      </value>\n                                      <value name="ARG1">\n                                        <block type="variables_get">\n                                          <title name="VAR">', escape(e.branches()), '</title>\n                                        </block>\n                                      </value>\n                                    </block>\n                                  </next>\n                                </block>\n                              </statement>\n                              <next>\n                                <block type="draw_turn" inline="true">\n                                  <title name="DIR">turnLeft</title>\n                                  <value name="VALUE">\n                                    <block type="math_number">\n                                      <title name="NUM">50</title>\n                                    </block>\n                                  </value>\n                                  <next>\n                                    <block type="draw_pen">\n                                      <title name="PEN">penUp</title>\n                                      <next>\n                                        <block type="draw_move" inline="true">\n                                          <title name="DIR">moveBackward</title>\n                                          <value name="VALUE">\n                                            <block type="math_arithmetic" inline="true">\n                                              <title name="OP">MULTIPLY</title>\n                                              <value name="A">\n                                                <block type="math_number">\n                                                  <title name="NUM">7</title>\n                                                </block>\n                                              </value>\n                                              <value name="B">\n                                                <block type="variables_get">\n                                                  <title name="VAR">', escape(e.depth()), "</title>\n                                                </block>\n                                              </value>\n                                            </block>\n                                          </value>\n                                        </block>\n                                      </next>\n                                    </block>\n                                  </next>\n                                </block>\n                              </next>\n                            </block>\n                          </next>\n                        </block>\n                      </next>\n                    </block>\n                  </next>\n                </block>\n              </next>\n            </block>\n          </statement>\n        </block>\n      </statement>\n    </block>\n  "), buf.push("")), buf.push("")
                }(); return buf.join("")
            }; return function (e) { return t(e, require("ejs").filters) }
        }()
    }, { "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js", ejs: "/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js" }], "/home/ubuntu/staging/apps/build/js/turtle/requiredBlocks.js": [function (e, t) { "use strict"; function n(e) { return { test: "draw_a_square", type: "draw_a_square", values: { VALUE: l.makeMathNumber(e) } } } function a(e) { return { test: "draw_a_snowman", type: "draw_a_snowman", values: { VALUE: l.makeMathNumber(e) } } } var l = e("../required_block_utils"), i = { test: "moveForward", type: "draw_move_by_constant" }, o = { test: function (e) { return "draw_move_by_constant" == e.type }, type: "draw_move_by_constant" }, r = function (e) { return { test: "moveForward", type: "draw_move_by_constant", titles: { VALUE: e } } }, s = { test: "moveBackward", type: "draw_move_by_constant", titles: { DIR: "moveBackward" } }, u = function (e) { return { test: "turnRight(", type: "draw_turn_by_constant_restricted", titles: { VALUE: e } } }, c = function (e) { return { test: "turnLeft(", type: "draw_turn_by_constant_restricted", titles: { VALUE: e } } }, p = function (e) { return { test: function (t) { return "draw_turn_by_constant" == t.type && ("???" === e || Blockly.JavaScript.valueToCode(t, "VALUE", Blockly.JavaScript.ORDER_NONE) == e) }, type: "draw_turn_by_constant", titles: { VALUE: e } } }, h = function (e) { return { test: function (e) { return "draw_turn" == e.type && "turnRight" == e.getTitleValue("DIR") }, type: "draw_turn", titles: { DIR: "turnRight" }, values: { VALUE: l.makeMathNumber(e) } } }, d = function (e) { return { test: function (e) { return "draw_turn" == e.type && "turnLeft" == e.getTitleValue("DIR") }, type: "draw_turn", titles: { DIR: "turnLeft" }, values: { VALUE: l.makeMathNumber(e) } } }, m = function (e) { return { test: function (e) { return "draw_move" == e.type }, type: "draw_move", values: { VALUE: l.makeMathNumber(e) } } }, b = function (e) { return { test: function (e) { return "draw_turn_by_constant_restricted" == e.type }, type: "draw_turn_by_constant_restricted", titles: { VALUE: e } } }, _ = function () { return { test: function (e) { return "draw_turn" == e.type }, type: "draw_turn", values: { VALUE: l.makeMathNumber("???") } } }, k = { test: "penColour('#", type: "draw_colour", values: { COLOUR: '<block type="colour_picker"></block>' } }, v = { test: "penColour(colour_random", type: "draw_colour", values: { COLOUR: '<block type="colour_random"></block>' } }, f = function (e, t) { return { test: function (n) { return "procedures_defnoreturn" == n.type && n.getTitleValue("NAME") == e && n.parameterNames_ && n.parameterNames_.length && n.parameterNames_[0] == t }, type: "procedures_defnoreturn", titles: { NAME: e }, extra: '<mutation><arg name="' + t + '"></arg></mutation>' } }; t.exports = { makeMathNumber: l.makeMathNumber, simpleBlock: l.simpleBlock, repeat: l.repeat, drawASquare: n, drawASnowman: a, MOVE_FORWARD_INLINE: i, MOVE_FORWARD_OR_BACKWARD_INLINE: o, moveForwardInline: r, MOVE_BACKWARD_INLINE: s, turnLeftRestricted: c, turnRightRestricted: u, turnRightByConstant: p, turnRight: h, turnLeft: d, move: m, drawTurnRestricted: b, drawTurn: _, SET_COLOUR_PICKER: k, SET_COLOUR_RANDOM: v, defineWithArg: f } }, { "../required_block_utils": "/home/ubuntu/staging/apps/build/js/required_block_utils.js" }], "/home/ubuntu/staging/apps/build/js/turtle/dropletConfig.js": [function (e, t) { "use strict"; var n = e("./apiJavascript.js"); t.exports.blocks = [{ func: "moveForward", parent: n, category: "Artist", params: ["100"] }, { func: "turnRight", parent: n, category: "Artist", params: ["90"] }, { func: "penColour", parent: n, category: "Artist", params: ["'#ff0000'"] }, { func: "penWidth", parent: n, category: "Artist", params: ["1"] }], t.exports.categories = { Artist: { color: "red", blocks: [] } } }, { "./apiJavascript.js": "/home/ubuntu/staging/apps/build/js/turtle/apiJavascript.js" }], "/home/ubuntu/staging/apps/build/js/turtle/controls.html.ejs": [function (require, module, exports) { module.exports = function () { var t = function anonymous(locals, filters, escape) { escape = escape || function (e) { return String(e).replace(/&(?!\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") }; var buf = []; with (locals || {}) !function () { buf.push('<div id="slider-cell">\n  <svg id="slider"\n       xmlns="http://www.w3.org/2000/svg"\n       xmlns:svg="http://www.w3.org/2000/svg"\n       xmlns:xlink="http://www.w3.org/1999/xlink"\n       version="1.1"\n       width="150"\n       height="50">\n      <!-- Slow icon. -->\n      <clipPath id="slowClipPath">\n        <rect width=26 height=12 x=5 y=14 />\n      </clipPath>\n      <image xlink:href="', escape(assetUrl(iconPath)), '" height=42 width=84 x=-21 y=-10\n          clip-path="url(#slowClipPath)" />\n      <!-- Fast icon. -->\n      <clipPath id="fastClipPath">\n        <rect width=26 height=16 x=120 y=10 />\n      </clipPath>\n      <image xlink:href="', escape(assetUrl(iconPath)), '" height=42 width=84 x=120 y=-11\n          clip-path="url(#fastClipPath)" />\n  </svg>\n  <img id="spinner" style="visibility: hidden;" src="', escape(assetUrl("media/turtle/loading.gif")), '" height=15 width=15>\n</div>\n') }(); return buf.join("") }; return function (e) { return t(e, require("ejs").filters) } }() }, { ejs: "/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js" }], "/home/ubuntu/staging/apps/build/js/turtle/customLevelBlocks.js": [function (e, t, n) { "use strict"; function a(e, t, n) { var a = t("count"); return n = n || "", [n + "// create_a_circle", n + "for (var " + a + " = 0; " + a + " < 36; " + n + a + "++) {", n + "  Turtle.moveForward(" + e + ");", n + "  Turtle.turnRight(10);", n + "}\n"].join("\n") } function l(e, t) { return { init: function () { this.setHSV(94, .84, .6), this.appendDummyInput().appendTitle(e), void 0 !== t && this.appendValueInput("VALUE").setAlign(Blockly.ALIGN_RIGHT).setCheck(Blockly.BlockValueType.NUMBER).appendTitle(t + ":"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip("") } } } function i(e, t, n) { var a = w.drawASquare(); e.Blocks.draw_a_square_custom = l(a, T), t.draw_a_square_custom = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["// draw_a_square", "for (var " + a + " = 0; " + a + " < 4; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(90);", "}\n"].join("\n") } } function o(e, t, n) { var i = w.createACircle(), o = w.sizeParameter(); e.Blocks.create_a_circle = l(i), e.Blocks.create_a_circle_size = l(i, o), t.create_a_circle = function () { return a(10, n) }, t.create_a_circle_size = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC); return a(e, n) } } function r(e, t, n) { var a = w.createASnowflakeBranch(); e.Blocks.create_a_snowflake_branch = l(a), t.create_a_snowflake_branch = function () { var e = n("count"), t = n("count"); return ["// create_a_snowflake_branch", "Turtle.jumpForward(90);", "Turtle.turnLeft(45);", "for (var " + e + " = 0; " + e + " < 3; " + e + "++) {", "  for (var " + t + " = 0; " + t + " < 3; " + t + "++) {", "    Turtle.moveForward(30);", "    Turtle.moveBackward(30);", "    Turtle.turnRight(45);", "  }", "  Turtle.turnLeft(90);", "  Turtle.moveBackward(30);", "  Turtle.turnLeft(45);", "}", "Turtle.turnRight(45);\n"].join("\n") } } function s(e, t, n) { var a = w.drawARhombus(); e.Blocks.draw_a_rhombus = l(a, T), t.draw_a_rhombus = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["for (var " + a + " = 0; " + a + " < 2; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(60);", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(120);", "}\n"].join("\n") } } function u(e, t, n) { var a = w.drawATriangle(); e.Blocks.draw_a_triangle = l(a, T), t.draw_a_triangle = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["// draw_a_triangle", "for (var " + a + " = 0; " + a + " < 3; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnLeft(120);", "}\n"].join("\n") } } function c(e, t, n) { var a = w.drawAHexagon(); e.Blocks.draw_a_hexagon = l(a, T), t.draw_a_hexagon = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["// draw_a_triangle", "for (var " + a + " = 0; " + a + " < 6; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnLeft(60);", "}\n"].join("\n") } } function p(e, t, n) { var a = w.drawAHouse(); e.Blocks.draw_a_house = l(a, T), t.draw_a_house = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["for (var " + a + " = 0; " + a + " < 4; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnLeft(90);", "}", "Turtle.turnLeft(90);", "Turtle.moveForward(" + e + ");", "Turtle.turnRight(90);", "for (var " + a + " = 0; " + a + " < 3; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnLeft(120);", "}", "Turtle.turnRight(90);", "Turtle.moveForward(" + e + ");", "Turtle.turnLeft(90);\n"].join("\n") } } function h(e, t, n) { var a = w.drawAFlower(); e.Blocks.draw_a_flower = l(a, T), t.draw_a_flower = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"), l = t.colour_random()[0]; return ['Turtle.penColour("#228b22");', "Turtle.moveForward(" + e + ");", "Turtle.turnLeft(18);", "for (var " + a + " = 0; " + a + " < 10; " + a + "++) {", "  Turtle.penColour(" + l + ");", "  Turtle.turnLeft(36);", "  Turtle.moveForward(" + e + " / 2);", "  Turtle.moveBackward(" + e + "/ 2);", "}", "Turtle.turnRight(198);", "Turtle.jumpForward(" + e + ");", "Turtle.turnRight(180);\n"].join("\n") } } function d(e, t, n) { var a = w.drawASnowflake(); e.Blocks.draw_a_snowflake = l(a), t.draw_a_snowflake = function () { var e = n("count"); return t.colour_random()[0], ["for (var " + e + " = 0; " + e + " < 8; " + e + "++) {", '  Turtle.penColour("#7fffd4");', "  Turtle.moveForward(30);", "  Turtle.turnRight(90);", "  Turtle.moveForward(15);", "  Turtle.turnRight(90);", '  Turtle.penColour("#0000cd");', "  Turtle.moveForward(15);", "  Turtle.turnRight(90);", "  Turtle.moveForward(30);", "  Turtle.turnRight(45);", "}\n"].join("\n") } } function m(e, t, n) { var a = w.drawAStar(); e.Blocks.draw_a_star = l(a, T), t.draw_a_star = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ["Turtle.turnRight(18);", "for (var " + a + " = 0; " + a + " < 5; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(144);", "}", "Turtle.turnLeft(18);\n"].join("\n") } } function b(e, t, n) { var a = w.drawARobot(); e.Blocks.draw_a_robot = l(a), t.draw_a_robot = function () { var e = n("count"); return ["Turtle.turnLeft(90);", "for (var " + e + " = 0; " + e + " < 4; " + e + "++) {", "  Turtle.moveForward(20);", "  Turtle.turnRight(90);", "}", "Turtle.turnRight(90);", "Turtle.moveBackward(10);", "Turtle.moveForward(40);", "Turtle.turnRight(90);", "Turtle.moveForward(80);", "Turtle.turnRight(90);", "Turtle.moveForward(40);", "Turtle.turnRight(90);", "Turtle.moveForward(80);", "Turtle.moveBackward(15);", "Turtle.turnLeft(120);", "Turtle.moveForward(40);", "Turtle.moveBackward(40);", "Turtle.turnRight(30);", "Turtle.moveBackward(40);", "Turtle.turnRight(210);", "Turtle.moveForward(40);", "Turtle.moveBackward(40);", "Turtle.turnRight(60);", "Turtle.moveForward(115);", "Turtle.moveBackward(50);", "Turtle.turnRight(90);", "Turtle.moveForward(40);", "Turtle.turnLeft(90);", "Turtle.moveForward(50);\n"].join("\n") } } function _(e, t, n) { var a = w.drawARocket(); e.Blocks.draw_a_rocket = l(a, T), t.draw_a_rocket = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"), l = n("count"); return ['Turtle.penColour("#ff0000");', "for (var " + a + " = 0; " + a + " < 3; " + a + "++) {", "  Turtle.moveForward(20);", "  Turtle.turnLeft(120);", "}", 'Turtle.penColour("#000000");', "Turtle.turnLeft(90);", "Turtle.jumpForward(20);", "Turtle.moveForward(" + e + ");", "Turtle.turnRight(90);", "Turtle.moveForward(20);", "Turtle.turnRight(90);", "Turtle.moveForward(" + e + ");", "Turtle.turnRight(90);", "Turtle.moveForward(20);", "Turtle.turnRight(90);", "Turtle.moveForward(" + e + ");", "Turtle.turnRight(90);", "for (var " + l + " = 0; " + l + " < 3; " + l + "++) {", "  Turtle.moveForward(20);", "  Turtle.turnLeft(120);", "}\n"].join("\n") } } function k(e, t, n) { var a = w.drawAPlanet(); e.Blocks.draw_a_planet = l(a, T), t.draw_a_planet = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ['Turtle.penColour("#808080");', "for (var " + a + " = 0; " + a + " < 360; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.moveBackward(" + e + ");", "  Turtle.turnRight(1);", "}\n"].join("\n") } } function v(e, t, n) { var a = w.drawUpperWave(); e.Blocks.draw_upper_wave = l(a, T), t.draw_upper_wave = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ['Turtle.penColour("#0000cd");', "for (var " + a + " = 0; " + a + " < 10; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnRight(18);", "}\n"].join("\n") } } function f(e, t, n) { var a = w.drawLowerWave(); e.Blocks.draw_lower_wave = l(a, T), t.draw_lower_wave = function () { var e = t.valueToCode(this, "VALUE", t.ORDER_ATOMIC), a = n("count"); return ['Turtle.penColour("#0000cd");', "for (var " + a + " = 0; " + a + " < 10; " + a + "++) {", "  Turtle.moveForward(" + e + ");", "  Turtle.turnLeft(18);", "}\n"].join("\n") } } function g(e, t) { var n = [[w.createSnowflakeSquare(), "square"], [w.createSnowflakeParallelogram(), "parallelogram"], [w.createSnowflakeLine(), "line"], [w.createSnowflakeSpiral(), "spiral"], [w.createSnowflakeFlower(), "flower"], [w.createSnowflakeFractal(), "fractal"], [w.createSnowflakeRandom(), "random"]]; e.Blocks.create_snowflake_dropdown = { init: function () { this.setHSV(94, .84, .6); var t = new e.FieldDropdown(n); this.appendDummyInput().appendTitle(t, "TYPE"), this.setPreviousStatement(!0), this.setNextStatement(!0), this.setTooltip("") } }, t.create_snowflake_dropdown = function () { var e = this.getTitleValue("TYPE"); return "Turtle.drawSnowflake('" + e + "', 'block_id_" + this.id + "');" } } var w = e("./locale"), y = e("../utils"); y.getLodash(), n.install = function (e, t, n) { i(e, t, n), o(e, t, n), r(e, t, n), u(e, t, n), p(e, t, n), h(e, t, n), d(e, t, n), c(e, t, n), m(e, t, n), b(e, t, n), _(e, t, n), k(e, t, n), s(e, t, n), v(e, t, n), f(e, t, n), g(e, t, n) }; var T = w.lengthParameter() }, { "../utils": "/home/ubuntu/staging/apps/build/js/utils.js", "./locale": "/home/ubuntu/staging/apps/build/js/turtle/locale.js" }], "/home/ubuntu/staging/apps/build/js/turtle/locale.js": [function (e, t) { "use strict"; t.exports = window.blockly.turtle_locale }, {}], "/home/ubuntu/staging/apps/build/js/turtle/colours.js": [function (e, t) { "use strict"; var n = { BLACK: "#000000", GREY: "#808080", KHAKI: "#c3b091", WHITE: "#ffffff", RED: "#ff0000", PINK: "#ff77ff", ORANGE: "#ffa000", YELLOW: "#ffff00", GREEN: "#228b22", BLUE: "#0000cd", AQUAMARINE: "#7fffd4", PLUM: "#843179", FROZEN1: "#d0fdfd", FROZEN2: "#d0fdd0", FROZEN3: "#d0d0fd", FROZEN4: "#e0e0e0", FROZEN5: "#ffffff", FROZEN6: "#e8e8e8", FROZEN7: "#bbd1e4", FROZEN8: "#fdd0fd", FROZEN9: "#aea4ff" }; t.exports = n }, {}], "/home/ubuntu/staging/apps/build/js/turtle/apiJavascript.js": [function (e, t, n) { "use strict"; var a; n.injectArtistAPI = function (e) { a = e }, n.moveForward = function (e) { a.log.push(["FD", e, null]) }, n.moveBackward = function (e) { a.log.push(["FD", -e, null]) }, n.moveUp = function (e) { a.log.push(["MV", e, 0, null]) }, n.moveDown = function (e) { a.log.push(["MV", e, 180, null]) }, n.moveLeft = function (e) { a.log.push(["MV", e, 270, null]) }, n.moveRight = function (e) { a.log.push(["MV", e, 90, null]) }, n.jumpUp = function (e) { a.log.push(["JD", e, 0, null]) }, n.jumpDown = function (e) { a.log.push(["JD", e, 180, null]) }, n.jumpLeft = function (e) { a.log.push(["JD", e, 270, null]) }, n.jumpRight = function (e) { a.log.push(["JD", e, 90, null]) }, n.jumpForward = function (e) { a.log.push(["JF", e, null]) }, n.jumpBackward = function (e) { a.log.push(["JF", -e, null]) }, n.turnRight = function (e) { a.log.push(["RT", e, null]) }, n.turnLeft = function (e) { a.log.push(["RT", -e, null]) }, n.globalAlpha = function (e) { a.log.push(["GA", e, null]) }, n.penUp = function () { a.log.push(["PU", null]) }, n.penDown = function () { a.log.push(["PD", null]) }, n.penWidth = function (e) { a.log.push(["PW", Math.max(e, 0), null]) }, n.penColour = function (e) { a.log.push(["PC", e, null]) }, n.penPattern = function (e) { a.log.push(["PS", e, null]) }, n.hideTurtle = function () { a.log.push(["HT", null]) }, n.showTurtle = function () { a.log.push(["ST", null]) }, n.drawSticker = function (e) { a.log.push(["sticker", e, null]) } }, {}], "/home/ubuntu/staging/apps/build/js/turtle/answers.js": [function (e, t, n) { "use strict"; var a = e("./api"), l = new a, i = function () { var e = Math.floor(Math.random() * Math.pow(2, 24)); e &= 10452895; var t = "#" + ("00000" + e.toString(16)).substr(-6); l.penColour(t) }, o = function (e, t) { for (var n = 0; 4 > n; n++) t && i(), l.moveForward(e), l.turnRight(90) }, r = function (e, t) { for (var n = 0; 3 > n; n++) t && i(), l.moveForward(e), l.turnRight(120) }, s = function (e) { l.turnLeft(90); for (var t = [.5 * e, .3 * e, .2 * e], n = 0; 6 > n; n++) { for (var a = t[3 > n ? n : 5 - n] / 57.5, i = 0; 180 > i; i += 2) l.moveForward(a), l.turnRight(2); 2 != n && l.turnRight(180) } l.turnLeft(90) }, u = function (e) { o(e), l.moveForward(e), l.turnRight(30), r(e), l.turnRight(60), l.moveForward(e), l.turnLeft(90), l.moveBackward(e) }; n.answer = function (e, t) { l.log = []; var n, a, c; if (1 == e) switch (t) { case 1: l.moveForward(100), l.turnRight(90), l.moveForward(100); break; case 2: i(), o(100, !1); break; case 3: o(100, !1); break; case 4: r(100, !0); break; case 5: o(100), r(100); break; case 6: r(100), l.turnRight(180), o(100); break; case 7: l.penColour("#00cc00"), l.turnRight(90), o(100), l.moveBackward(150), o(100); break; case 8: for (n = 0; 8 > n; n++) i(), l.moveForward(100), l.moveBackward(100), l.turnRight(45); break; case 9: for (n = 0; 360 > n; n++) l.moveForward(1), l.turnRight(1) } else if (2 == e) switch (t) { case 1: i(), o(100); break; case 2: l.penColour("#00ff00"), o(50); break; case 3: for (n = 0; 3 > n; n++) i(), o(100), l.turnRight(120); break; case 4: for (n = 0; 36 > n; n++) i(), o(100), l.turnRight(10); break; case 5: case 6: for (c = 50; 90 >= c; c += 10) o(c); break; case 7: for (c = 25; 60 >= c; c += 5) l.moveForward(c), l.turnRight(90); break; case 7.5: s(250), s(100); break; case 8: for (var p = 0; 3 > p; p++) i(), s(150), l.turnRight(90), l.jumpForward(100), l.turnLeft(90); break; case 9: for (var h = 110; h >= 70; h -= 10) i(), s(h), l.turnRight(90), l.jumpForward(60), l.turnLeft(90) } else if (3 == e) switch (t) { case 1: o(100); break; case 2: r(100); break; case 3: r(100), l.moveForward(100), o(100), l.moveForward(100), r(100); break; case 4: u(100); break; case 5: u(100); break; case 6: i(), r(100), l.moveForward(100), i(), r(200); break; case 7: u(150); break; case 8: u(100), u(150), u(100); break; case 9: for (n = 50; 150 >= n; n += 50) i(), u(n) } else if (4 == e) switch (t) { case 1: r(100); break; case 2: for (n = 0; 2 > n; n++) i(), r(100), l.turnRight(90); break; case 3: for (n = 0; 4 > n; n++) i(), r(100), l.turnRight(90); break; case 4: for (n = 0; 10 > n; n++) i(), r(100), l.turnRight(36); break; case 5: for (n = 0; 36 > n; n++) i(), r(100), l.turnRight(10); break; case 6: o(20); break; case 7: for (n = 0; 10 > n; n++) i(), o(20), l.moveForward(20); break; case 8: for (a = 0; 4 > a; a++) { for (n = 0; 10 > n; n++) i(), o(20), l.moveForward(20); l.turnRight(90) } break; case 9: for (a = 0; 4 > a; a++) { for (n = 0; 10 > n; n++) i(), o(20), l.moveForward(20); l.turnRight(80) } break; case 10: for (a = 0; 9 > a; a++) { for (n = 0; 10 > n; n++) i(), o(20), l.moveForward(20); l.turnRight(80) } } return l.log } }, { "./api": "/home/ubuntu/staging/apps/build/js/turtle/api.js" }], "/home/ubuntu/staging/apps/build/js/turtle/api.js": [function (e, t) { "use strict"; var n = e("../utils"), a = n.getLodash(), l = function () { this.log = [] }; t.exports = l, l.prototype.drawCircle = function (e, t) { for (var n = 0; 36 > n; n++) this.moveForward(e, t), this.turnRight(10, t) }, l.prototype.drawSnowflake = function (e, t) { var n, l, i, o = function () { var e = Blockly.FieldColour.COLOURS; return e[Math.floor(Math.random() * e.length)] }; switch ("random" === e && (e = a.sample(["fractal", "flower", "spiral", "line", "parallelogram", "square"])), e) { case "fractal": for (n = 0; 8 > n; n++) { for (this.jumpForward(45, t), this.turnLeft(45, t), l = 0; 3 > l; l++) { for (i = 0; 3 > i; i++) this.moveForward(15, t), this.moveBackward(15, t), this.turnRight(45, t); this.turnLeft(90, t), this.moveBackward(15, t), this.turnLeft(45, t) } this.turnRight(90, t) } break; case "flower": for (n = 0; 5 > n; n++) this.drawCircle(2, t), this.drawCircle(4, t), this.turnRight(72, t); break; case "spiral": for (n = 0; 20 > n; n++) this.drawCircle(3, t), this.moveForward(20, t), this.turnRight(18, t); break; case "line": for (n = 0; 90 > n; n++) this.penColour(o()), this.moveForward(50, t), this.moveBackward(50, t), this.turnRight(4, t); this.penColour("#FFFFFF", t); break; case "parallelogram": for (n = 0; 10 > n; n++) { for (l = 0; 2 > l; l++) this.moveForward(50, t), this.turnRight(60, t), this.moveForward(50, t), this.turnRight(120, t); this.turnRight(36, t) } break; case "square": for (n = 0; 10 > n; n++) { for (l = 0; 4 > l; l++) this.moveForward(50, t), this.turnRight(90, t); this.turnRight(36, t) } } }, l.prototype.moveForward = function (e, t) { this.log.push(["FD", e, t]) }, l.prototype.moveBackward = function (e, t) { this.log.push(["FD", -e, t]) }, l.prototype.moveUp = function (e, t) { this.log.push(["MV", e, 0, t]) }, l.prototype.moveDown = function (e, t) { this.log.push(["MV", e, 180, t]) }, l.prototype.moveLeft = function (e, t) { this.log.push(["MV", e, 270, t]) }, l.prototype.moveRight = function (e, t) { this.log.push(["MV", e, 90, t]) }, l.prototype.jumpUp = function (e, t) { this.log.push(["JD", e, 0, t]) }, l.prototype.jumpDown = function (e, t) { this.log.push(["JD", e, 180, t]) }, l.prototype.jumpLeft = function (e, t) { this.log.push(["JD", e, 270, t]) }, l.prototype.jumpRight = function (e, t) { this.log.push(["JD", e, 90, t]) }, l.prototype.jumpForward = function (e, t) { this.log.push(["JF", e, t]) }, l.prototype.jumpBackward = function (e, t) { this.log.push(["JF", -e, t]) }, l.prototype.turnRight = function (e, t) { this.log.push(["RT", e, t]) }, l.prototype.turnLeft = function (e, t) { this.log.push(["RT", -e, t]) }, l.prototype.globalAlpha = function (e, t) { this.log.push(["GA", e, t]) }, l.prototype.penUp = function (e) { this.log.push(["PU", e]) }, l.prototype.penDown = function (e) { this.log.push(["PD", e]) }, l.prototype.penWidth = function (e, t) { this.log.push(["PW", Math.max(e, 0), t]) }, l.prototype.penColour = function (e, t) { this.log.push(["PC", e, t]) }, l.prototype.penPattern = function (e, t) { this.log.push(["PS", e, t]) }, l.prototype.hideTurtle = function (e) { this.log.push(["HT", e]) }, l.prototype.showTurtle = function (e) { this.log.push(["ST", e]) }, l.prototype.drawSticker = function (e, t) { this.log.push(["sticker", e, t]) } }, { "../utils": "/home/ubuntu/staging/apps/build/js/utils.js" }]
}, {}, ["/home/ubuntu/staging/apps/build/js/turtle/main.js"]);