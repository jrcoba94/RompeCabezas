var turtle_locale = { lc: { ar: function (n) { return 0 === n ? "zero" : 1 == n ? "one" : 2 == n ? "two" : n % 100 >= 3 && 10 >= n % 100 && n == Math.floor(n) ? "few" : n % 100 >= 11 && 99 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, en: function (n) { return 1 === n ? "one" : "other" }, bg: function (n) { return 1 === n ? "one" : "other" }, bn: function (n) { return 1 === n ? "one" : "other" }, ca: function (n) { return 1 === n ? "one" : "other" }, cs: function (n) { return 1 == n ? "one" : 2 == n || 3 == n || 4 == n ? "few" : "other" }, da: function (n) { return 1 === n ? "one" : "other" }, de: function (n) { return 1 === n ? "one" : "other" }, el: function (n) { return 1 === n ? "one" : "other" }, es: function (n) { return 1 === n ? "one" : "other" }, et: function (n) { return 1 === n ? "one" : "other" }, eu: function (n) { return 1 === n ? "one" : "other" }, fa: function () { return "other" }, fi: function (n) { return 1 === n ? "one" : "other" }, fil: function (n) { return 0 === n || 1 == n ? "one" : "other" }, fr: function (n) { return 0 === Math.floor(n) || 1 == Math.floor(n) ? "one" : "other" }, ga: function (n) { return 1 == n ? "one" : 2 == n ? "two" : "other" }, gl: function (n) { return 1 === n ? "one" : "other" }, he: function (n) { return 1 === n ? "one" : "other" }, hi: function (n) { return 0 === n || 1 == n ? "one" : "other" }, hr: function (n) { return n % 10 == 1 && n % 100 != 11 ? "one" : n % 10 >= 2 && 4 >= n % 10 && (12 > n % 100 || n % 100 > 14) && n == Math.floor(n) ? "few" : n % 10 === 0 || n % 10 >= 5 && 9 >= n % 10 || n % 100 >= 11 && 14 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, hu: function () { return "other" }, id: function () { return "other" }, is: function (n) { return n % 10 === 1 && n % 100 !== 11 ? "one" : "other" }, it: function (n) { return 1 === n ? "one" : "other" }, ja: function () { return "other" }, ko: function () { return "other" }, lt: function (n) { return n % 10 == 1 && (11 > n % 100 || n % 100 > 19) ? "one" : n % 10 >= 2 && 9 >= n % 10 && (11 > n % 100 || n % 100 > 19) && n == Math.floor(n) ? "few" : "other" }, lv: function (n) { return 0 === n ? "zero" : n % 10 == 1 && n % 100 != 11 ? "one" : "other" }, mk: function (n) { return n % 10 == 1 && 11 != n ? "one" : "other" }, mr: function (n) { return 1 === n ? "one" : "other" }, ms: function () { return "other" }, mt: function (n) { return 1 == n ? "one" : 0 === n || n % 100 >= 2 && 4 >= n % 100 && n == Math.floor(n) ? "few" : n % 100 >= 11 && 19 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, nl: function (n) { return 1 === n ? "one" : "other" }, no: function (n) { return 1 === n ? "one" : "other" }, pl: function (n) { return 1 == n ? "one" : n % 10 >= 2 && 4 >= n % 10 && (12 > n % 100 || n % 100 > 14) && n == Math.floor(n) ? "few" : n % 10 === 0 || 1 != n && n % 10 == 1 || (n % 10 >= 5 && 9 >= n % 10 || n % 100 >= 12 && 14 >= n % 100) && n == Math.floor(n) ? "many" : "other" }, pt: function (n) { return 1 === n ? "one" : "other" }, ro: function (n) { return 1 == n ? "one" : 0 === n || 1 != n && n % 100 >= 1 && 19 >= n % 100 && n == Math.floor(n) ? "few" : "other" }, ru: function (n) { return n % 10 == 1 && n % 100 != 11 ? "one" : n % 10 >= 2 && 4 >= n % 10 && (12 > n % 100 || n % 100 > 14) && n == Math.floor(n) ? "few" : n % 10 === 0 || n % 10 >= 5 && 9 >= n % 10 || n % 100 >= 11 && 14 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, sk: function (n) { return 1 == n ? "one" : 2 == n || 3 == n || 4 == n ? "few" : "other" }, sl: function (n) { return n % 100 == 1 ? "one" : n % 100 == 2 ? "two" : n % 100 == 3 || n % 100 == 4 ? "few" : "other" }, sq: function (n) { return 1 === n ? "one" : "other" }, sr: function (n) { return n % 10 == 1 && n % 100 != 11 ? "one" : n % 10 >= 2 && 4 >= n % 10 && (12 > n % 100 || n % 100 > 14) && n == Math.floor(n) ? "few" : n % 10 === 0 || n % 10 >= 5 && 9 >= n % 10 || n % 100 >= 11 && 14 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, sv: function (n) { return 1 === n ? "one" : "other" }, ta: function (n) { return 1 === n ? "one" : "other" }, th: function () { return "other" }, tr: function (n) { return 1 === n ? "one" : "other" }, uk: function (n) { return n % 10 == 1 && n % 100 != 11 ? "one" : n % 10 >= 2 && 4 >= n % 10 && (12 > n % 100 || n % 100 > 14) && n == Math.floor(n) ? "few" : n % 10 === 0 || n % 10 >= 5 && 9 >= n % 10 || n % 100 >= 11 && 14 >= n % 100 && n == Math.floor(n) ? "many" : "other" }, ur: function (n) { return 1 === n ? "one" : "other" }, vi: function () { return "other" }, zh: function () { return "other" } }, c: function (n, r) { if (!n) throw new Error("MessageFormat: Data required for '" + r + "'.") }, n: function (n, r, e) { if (isNaN(n[r])) throw new Error("MessageFormat: '" + r + "' isn't a number."); return n[r] - (e || 0) }, v: function (n, r) { return turtle_locale.c(n, r), n[r] }, p: function (n, r, e, t, o) { return turtle_locale.c(n, r), n[r] in o ? o[n[r]] : (r = turtle_locale.lc[t](n[r] - e), r in o ? o[r] : o.other) }, s: function (n, r, e) { return turtle_locale.c(n, r), n[r] in e ? e[n[r]] : e.other } }; (window.blockly = window.blockly || {}).turtle_locale = { blocksUsed: function () { return "Bloques utilizados: %1" }, branches: function () { return "ramas" }, catColour: function () { return "Color" }, catControl: function () { return "vuelta" }, catMath: function () { return "Matem\xe1ticas" }, catProcedures: function () { return "funciones" }, catTurtle: function () { return "Acciones" }, catVariables: function () { return "variables" }, catLogic: function () { return "L\xf3gica" }, colourTooltip: function () { return "Cambia el color del l\xe1piz." }, createACircle: function () { return "crear un c\xedrculo" }, createSnowflakeSquare: function () { return "crear un copo de nieve del tipo cuadrado" }, createSnowflakeParallelogram: function () { return "crear un copo de nieve del tipo paralelogramo" }, createSnowflakeLine: function () { return "crear un copo de nieve del tipo l\xednea" }, createSnowflakeSpiral: function () { return "crear un copo de nieve del tipo espiral" }, createSnowflakeFlower: function () { return "crear un copo de nieve del tipo flor" }, createSnowflakeFractal: function () { return "crear un copo de nieve del tipo fractal" }, createSnowflakeRandom: function () { return "crear un copo de nieve del tipo aleatorio" }, createASnowflakeBranch: function () { return "crear un copo de nieve del tipo rama" }, degrees: function () { return "grados" }, depth: function () { return "profundidad" }, dots: function () { return "pixeles" }, drawACircle: function () { return "dibujar un c\xedrculo" }, drawAFlower: function () { return "dibujar una flor" }, drawAHexagon: function () { return "dibujar un hex\xe1gono" }, drawAHouse: function () { return "dibujar una casa" }, drawAPlanet: function () { return "dibujar un planeta" }, drawARhombus: function () { return "dibujar un rombo" }, drawARobot: function () { return "dibujar un robot" }, drawARocket: function () { return "dibujar un cohete" }, drawASnowflake: function () { return "dibujar un copo de nieve" }, drawASnowman: function () { return "dibuje un mu\xf1eco de nieve" }, drawASquare: function () { return "Dibuje un cuadrado" }, drawAStar: function () { return "dibujar una estrella" }, drawATree: function () { return "dibujar un \xe1rbol" }, drawATriangle: function () { return "dibujar un tri\xe1ngulo" }, drawUpperWave: function () { return "dibujar la onda superior" }, drawLowerWave: function () { return "dibujar la onda mas baja" }, drawSticker: function () { return "dibujar sello" }, heightParameter: function () { return "altura" }, hideTurtle: function () { return "ocultar artista" }, jump: function () { return "salta" }, jumpBackward: function () { return "saltar hacia atr\xe1s" }, jumpForward: function () { return "saltar hacia adelante" }, jumpTooltip: function () { return "Mueve el artista sin dejar ninguna marca." }, jumpEastTooltip: function () { return "Mueve al artista hacia el este sin dejar ninguna marca." }, jumpNorthTooltip: function () { return "Mueve al artista hacia el norte sin dejar ninguna marca." }, jumpSouthTooltip: function () { return "Mueve al artista hacia el sur sin dejar ninguna marca." }, jumpWestTooltip: function () { return "Mueve al artista hacia el oeste sin dejar ninguna marca." }, lengthFeedback: function () { return "Est\xe1 correcto, excepto por las longitudes a moverse." }, lengthParameter: function () { return "longitud" }, loopVariable: function () { return "contador" }, moveBackward: function () { return "mover hacia atr\xe1s" }, moveEastTooltip: function () { return "Mueve al artista al este." }, moveForward: function () { return "mover hacia adelante" }, moveForwardTooltip: function () { return "Avanza el artista." }, moveNorthTooltip: function () { return "Mueve al artista al norte." }, moveSouthTooltip: function () { return "Mueve al artista al sur." }, moveWestTooltip: function () { return "Mueve al artista al oeste." }, moveTooltip: function () { return "Mueve el artista hacia adelante o atr\xe1s en la cantidad especificada." }, notBlackColour: function () { return "Tienes que establecer un color que no sea negro para este nivel." }, numBlocksNeeded: function () { return "Este nivel puede resolverse con %1 bloques.  Usaste %2." }, penDown: function () { return "bajar l\xe1piz" }, penTooltip: function () { return "Levanta o baja el l\xe1piz, para empezar o dejar de dibujar." }, penUp: function () { return "levantar l\xe1piz" }, reinfFeedbackMsg: function () { return "\xa1Aqu\xed est\xe1 tu dibujo! Sigue trabajando en \xe9l o contin\xfaa al siguiente Puzzle." }, setAlpha: function () { return "establecer alpha" }, setColour: function () { return "definir color" }, setPattern: function () { return "establecer patr\xf3n" }, setWidth: function () { return "definir ancho" }, shareDrawing: function () { return "Comparte tu dibujo:" }, showMe: function () { return "Mu\xe9strame" }, showTurtle: function () { return "mostrar artista" }, sizeParameter: function () { return "tama\xf1o" }, step: function () { return "paso" }, tooFewColours: function () { return "Debes utilizar al menos %1 colores diferentes en este nivel.  S\xf3lo utilizaste %2." }, turnLeft: function () { return "girar a la izquierda por" }, turnRight: function () { return "girar a la derecha por" }, turnRightTooltip: function () { return "Gira el artista hacia la derecha en el \xe1ngulo especificado." }, turnTooltip: function () { return "Gira el artista a la izquierda o la derecha en la cantidad de grados especificada." }, turtleVisibilityTooltip: function () { return "Hace que el artista sea visible o invisible." }, widthTooltip: function () { return "Cambia el ancho del l\xe1piz." }, wrongColour: function () { return "Tu imagen es de un color incorrecto.  Para este nivel, debe ser %1." } };